define(function () {
return ["GUID-00D18DF8-F30B-4621-9C6D-312B5F1B34EF.html@@@1.3.2.3.2 MAC_WRP_Open Function@@@MAC_WRP_HANDLE MAC_WRP_Open ( const SYS_MODULE_INDEX index, MAC_WRP_BAND band ); Opens the specified MAC Wrapper instance and returns a handle to it. This routine opens the specified MAC Wrapper...","GUID-00D84923-1FEB-4AF6-A863-4D5ED4FE1DA8.html@@@1.2.5.15 ADP_NOTIFICATIONS_TO_LBP Struct@@@typedef struct { ADP_LBP_CFM_CALLBACK lbpConfirm; ADP_LBP_IND_CALLBACK lbpIndication; } ADP_NOTIFICATIONS_TO_LBP; Set of event handler function pointers for LBP module to receive events from ADP...","GUID-00E71D13-7322-4F7C-9889-1752BAE647CC.html@@@1.3.2.3.35 MAC_WRP_DATA Struct@@@typedef struct { /* State of the MAC Wrapper module */ MAC_WRP_STATE state; /* Callbacks */ MAC_WRP_HANDLERS macWrpHandlers; /* Mac Wrapper instance handle */ MAC_WRP_HANDLE macWrpHandle; /* Mac...","GUID-023A7817-EE04-43C8-B1A7-0C0FFC860C2D.html@@@1.2.5.65 ADP_MODULATION_PLC Enum@@@typedef enum { MOD_ROBO, MOD_BPSK, MOD_DBPSK, MOD_QPSK, MOD_DQPSK, MOD_ 8 PSK, MOD_D8PSK, MOD_ 16 QAM, MOD_UNKNOWN = 255 } ADP_MODULATION_PLC; Identifies the available modulation values for PLC...","GUID-02625864-D9DD-4E15-98CD-0D7BD32E505E.html@@@1.3.2.3.10 MAC_WRP_DataIndication Typedef@@@typedef void (*MAC_WRP_DataIndication)(MAC_WRP_DATA_INDICATION_PARAMS *diParams); Pointer to a Data Indication Event handler function. This data type defines the required function signature for the...","GUID-02A694CF-88A5-4ADA-8785-7EEEC62D66EA.html@@@Worldwide Sales and Service@@@AMERICAS ASIA/PACIFIC ASIA/PACIFIC EUROPE Corporate Office 2355 West Chandler Blvd. Chandler, AZ 85224-6199 Tel: 480-792-7200 Fax: 480-792-7277 Technical Support: www.microchip.com/support Web...","GUID-052F1323-B0F3-4EEA-A387-C2DCCB882812.html@@@1.2.5.9 ADP_AVAILABLE_MAC_LAYERS Enum@@@typedef enum { ADP_AVAILABLE_MAC_PLC = 0x00 , ADP_AVAILABLE_MAC_RF = 0x01 , ADP_AVAILABLE_MAC_BOTH = 0x02 } ADP_AVAILABLE_MAC_LAYERS; Defines the possible values for MAC layers availability. This...","GUID-05D0383B-4E7E-4D73-AE4C-8133595D6E50.html@@@1.3.5.1.14 MAC_RF_TABLES Struct@@@typedef struct { // Pointers MAC_RF_POS_TABLE_ENTRY *macRfPosTable; MAC_DEVICE_TABLE_ENTRY *macRfDeviceTable; MAC_RF_DSN_TABLE_ENTRY *macRfDsnTable; // Sizes uint16_t macRfPosTableSize; uint16_t...","GUID-065B3DAE-F945-4416-B107-E42F2BCC0DE3.html@@@1.3.5.1.18 MAC_RF_HEADER Struct@@@typedef struct { MAC_RF_FRAME_CONTROL frameControl; uint8_t sequenceNumber; MAC_PAN_ID destPanId; MAC_ADDRESS destAddress; MAC_PAN_ID srcPanId; MAC_ADDRESS srcAddress; MAC_AUXILIARY_SECURITY_HEADER...","GUID-076997D0-3AD7-4922-80AB-845B27A702CA.html@@@1.3.2.3.71 MAC_WRP_SerialParseGetRequest Function@@@uint32_t MAC_WRP_SerialParseGetRequest (uint8_t* pData, uint16_t* index); Parse PIB get request serial message. This routine parses a PIB get request serial message. It gives the PIB attribute and...","GUID-077F193E-CE53-4A82-AEC2-EE17891E96B8.html@@@2.1 Create your first G3 Application using PIC32CXMTG-EK, PL460-EK and ATREB215-XPRO-A@@@This tutorial demonstrates how to create a G3 Hybrid (PLC and RF) application project with MPLAB\u00AE Harmony G3-PLC and G3-RF Drivers, G3 Stack Component, and MPLAB\u00AE Harmony v3 modules, using MPLABX IDE...","GUID-07985EED-D525-413B-AEFE-78B563328687.html@@@Quality Management System@@@For information regarding Microchip\u2019s Quality Management Systems, please visit www.microchip.com/quality...","GUID-07E98617-C9A0-45DB-A4FC-9A4251FCD754.html@@@1.5 G3 RF PAL Module@@@The G3 RF Platform Abstraction Layer (PAL) module acts as an abstraction interface between the IEEE 802.15.4 RF PHY layer and the G3 RF MAC layer. Two RF devices are supported: RF215: External device...","GUID-0802795E-B204-4DDF-8FE2-0B2CF00C044A.html@@@1.6.3.2 DRV_G3ADP_MAC_Deinitialize Function@@@void DRV_G3ADP_MAC_Deinitialize (SYS_MODULE_OBJ object); Deinitializes the G3 ADP Ethernet MAC. This function supports teardown of the G3 ADP MAC (opposite of set up). Used by tcpip_module_manager...","GUID-08155BB2-C09F-4335-BC7C-70FB64284BF7.html@@@1.3.3.1.4 MAC_DataIndication Typedef@@@typedef void (*MAC_DataIndication)(MAC_DATA_INDICATION_PARAMS *diParams); Pointer to a Data Indication Event handler function. This data type defines the required function signature for the MAC Data...","GUID-0856EB9B-3051-4859-AD8A-512FBABCCBE1.html@@@1.4.3.4 PAL_PLC_Deinitialize Function@@@void PAL_PLC_Deinitialize (SYS_MODULE_OBJ object); De-initializes the specified instance of the PLC PAL module. This function de-initializes the specified instance of the PLC PAL module, disabling its...","GUID-09E97D19-BF40-4184-9EC8-D026DBD846E8.html@@@1.3.5.1.6 MAC_RF_GetRequestSync Function@@@MAC_STATUS MAC_RF_GetRequestSync ( MAC_RF_PIB_ATTRIBUTE attribute, uint16_t index, MAC_PIB_VALUE *pibValue ); The MAC_RF_GetRequestSync primitive gets the value of an attribute in the MAC RF layer...","GUID-0A516040-17DC-4FED-8586-52420D75F66A.html@@@1.6.3.10 DRV_G3ADP_MAC_PacketTx Function@@@TCPIP_MAC_RES DRV_G3ADP_MAC_PacketTx (DRV_HANDLE hMac, TCPIP_MAC_PACKET * ptrPacket); G3 ADP MAC driver transmit function. This is the MAC transmit function. Using this function a packet is submitted...","GUID-0A870E50-509F-4670-9EF9-E2435E44845B.html@@@1.4.2 Configuring the G3 PLC PAL@@@G3 PLC PAL is configured via MCC. Below is the Snapshot of the MCC configuration window for PLC PAL and brief description. Figure .\u2000 G3 PLC PAL configuration options Enable G3 PHY sniffer...","GUID-0A8DBCF0-FD9F-4D6E-9111-D89CC9C4DE8D.html@@@1.3.5.1.10 MAC_RF_ResetRequest Function@@@void MAC_RF_ResetRequest ( MAC_RESET_REQUEST_PARAMS *rstParams ); The MAC_RF_ResetRequest primitive resets the MAC RF module. Reset operation initializes MAC RF State Machine and PIB to their default...","GUID-0BB6907C-6DFF-43CD-85DE-DB999FB5DF96.html@@@1.3.5.1.20 MAC_RF_LI_IE Struct@@@typedef struct { MAC_RF_HEADER_IE headerIE; uint8_t dutyCycle; uint8_t txPowerOffset; } MAC_RF_LI_IE; Defines the fields of the MAC Link Info Information Element. This structure contains the fields of...","GUID-0BC0892E-8FC3-4B43-8243-1C16A6766E31.html@@@1.2 G3 Adaptation Layer@@@The following chapters describe the G3 Adaptation Layer, show how it is configured, and detail the different parts that make it up...","GUID-0C2E0E37-DD49-464E-95EE-4F820C0A69D9.html@@@1.4.3.15 PAL_PLC_DataIndication Typedef@@@typedef void (*PAL_PLC_DataIndication)(uint8_t *pData, uint16_t length); Pointer to a PLC PAL Data Indication event handler function. This data type defines the required function signature for the PLC...","GUID-0FB3F908-88EE-45CE-94F5-E97AF9049C9B.html@@@Microchip Information@@@...","GUID-11265138-05EC-4FB8-A848-EF177C7E14CD.html@@@1.2.5.56 ADP_NETWORK_STATUS_IND_CALLBACK Typedef@@@typedef void (*ADP_NETWORK_STATUS_IND_CALLBACK)(ADP_NETWORK_STATUS_IND_PARAMS* pNetworkStatusInd); Pointer to a Network Status Indication Event handler function. This data type defines the required...","GUID-122081CB-83E3-4796-A947-F6A59E3DE50C.html@@@1.3.2.3.33 MAC_WRP_GetAvailableMacLayers Function@@@MAC_WRP_AVAILABLE_MAC_LAYERS MAC_WRP_GetAvailableMacLayers ( MAC_WRP_HANDLE handle ); The MAC_WRP_GetAvailableMacLayers primitive gets the available MAC layer(s). G3 projects may include PLC MAC, RF...","GUID-125F1A93-76CC-4BD7-BACA-01844FBD5F4F.html@@@Legal Notice@@@This publication and the information herein may be used only with Microchip products, including to design, test, and integrate Microchip products with your application. Use of this information in any...","GUID-13D91FAD-0BC6-46A8-81C3-4AEB967C66E4.html@@@1.3.2.3.73 MAC_WRP_SerialParseSetRequest Function@@@MAC_WRP_PIB_ATTRIBUTE MAC_WRP_SerialParseSetRequest ( uint8_t* pData, uint16_t* index, MAC_WRP_PIB_VALUE* pibValue ); Parse PIB set request serial message. This routine parses a PIB set request serial...","GUID-1477A724-AD39-4749-ABF4-6AB3EB014F02.html@@@1.3.3.1.46 MAC_TX_OPTIONS Enum@@@typedef enum { MAC_TX_OPTION_NO_ACK = 0x00 , MAC_TX_OPTION_ACK = 0x01 , } MAC_TX_OPTIONS; Identifies the available TX Option values for G3 frames. This enumeration identifies the possible TX Option...","GUID-14F7A456-A358-47C0-AAB8-AA2D3F7FBE69.html@@@1.4.3.8 PAL_PLC_GetMacRtPib Function@@@PAL_PLC_PIB_RESULT PAL_PLC_GetMacRtPib (PAL_PLC_HANDLE handle, MAC_RT_PIB_OBJ *pibObj); Gets value of G3 MAC-RT or G3 PHY PIB attribute. This routine allows a client to get information from PLC...","GUID-15835BE6-02AF-4483-87C0-FE02E83B3906.html@@@1.5.3.7 PAL_RF_TxCancel Function@@@void PAL_RF_TxCancel (PAL_RF_HANDLE handle, PAL_RF_TX_HANDLE txHandle); Allows a client to cancel a previously requested transmission. This routine allows a client to cancel a previously requested...","GUID-1632313F-FCE1-4A68-89EC-A4E10B2F0156.html@@@1.2.5.38 ADP_SetRequest Function@@@void ADP_SetRequest ( uint32_t attributeId, uint16_t attributeIndex, uint8_t attributeLength, const uint8_t *pAttributeValue ); This primitive sets the value of an attribute in the ADP information...","GUID-169A4B0B-F1C7-4178-8F86-C86FF93682A4.html@@@1.4.3.6 PAL_PLC_Reset Function@@@void PAL_PLC_Reset (PAL_PLC_HANDLE handle, bool resetMib); Allows a client to reset the PLC PAL module. This routine performs a reset of the PLC device. PAL_PLC_HandleGet must have been called to...","GUID-182FF3CB-3F13-462E-B5EF-ED71412146CB.html@@@1.2.5.25 ADP_PAN_DESCRIPTOR Struct@@@typedef struct { /* The 16-bit PAN identifier */ uint16_t panId; /* The 16 bit short address of a device in this PAN to be used as the LBA * by the associating device */ uint16_t lbaAddress; /* The...","GUID-18C3990F-13AD-441E-9CC0-4F92435109CF.html@@@1.2.5.99 LBP_ShortAddressAssign Function@@@void LBP_ShortAddressAssign ( uint8_t *pExtAddress uint16_t assignedAddress ); Assigns a short address to a device willing to join. This primitive allows the upper layer to assign a short address to a...","GUID-19857A24-CEF8-41AE-99BA-904EB590BBF8.html@@@1.2.5.61 ADP_NON_VOLATILE_DATA_IND_CALLBACK Typedef@@@typedef void (*ADP_NON_VOLATILE_DATA_IND_CALLBACK)(ADP_NON_VOLATILE_DATA_IND_PARAMS* pNonVolatileDataInd); Pointer to a Non-Volatile Data Indication Event handler function. This data type defines the...","GUID-1990FAF1-B457-416B-82A6-C97A488352FE.html@@@1.2.5.75 LBP_ADP_NETWORK_LEAVE_CFM_CALLBACK Typedef@@@typedef void (*LBP_ADP_NETWORK_LEAVE_CFM_CALLBACK)(uint8_t status); Pointer to a Network Leave Confirm Event handler function. This data type defines the required function signature for the ADP...","GUID-19B8C2B9-E559-4E62-A614-9729CCD154CA.html@@@1.2.5.64 ADP_ROUTE_NOT_FOUND_IND_PARAMS Struct@@@typedef struct { /* The NSDU failed to be delivered */ const uint8_t* pNsdu; /* The size of the NSDU failed to be delivered, in bytes; Range: 0 - 1280 */ uint16_t nsduLength; /* Address of the frame...","GUID-19D97AAF-A96A-4720-B8A8-B11BB511B457.html@@@1.3.3.1.25 MAC_COMMON_GetSecondsCounter Function@@@uint32_t MAC_COMMON_GetSecondsCounter ( void ); The MAC_COMMON_GetSecondsCounter primitive gets the value of a counter that is incremented every second. A seconds counter is provided in order to be...","GUID-1A0368D1-E5D6-4D65-8802-F27A130473B6.html@@@1.4.3.7 PAL_PLC_GetPhyTime Function@@@uint32_t PAL_PLC_GetPhyTime (PAL_PLC_HANDLE handle); Gets the internal timer reference from PLC transceiver in microseconds. The PLC transceiver has an internal 32-bit counter which is used as time...","GUID-1A0BEAFB-BCD7-4A4D-B3F0-F931B1D06DFD.html@@@2.8 Clock Configuration@@@Start Clock Manager from Plugins drop-down menu Figure .\u2000 Start Clock Manager The application demo can work with default clock configuration Verify that PLLACK0 is 20000000 Hz Verify that PLLACK1 is...","GUID-1A81F267-0946-4574-9516-F38B721F79B7.html@@@1.5.3.21 PAL_RF_OFDM_MCS Enum@@@typedef enum { /* OFDM: BPSK, 1/2 convolutional encoder rate, 4x frequency repetition */ PAL_RF_OFDM_MCS_ 0 = 0 , /* OFDM: BPSK, 1/2 convolutional encoder rate, 2x frequency repetition */...","GUID-1CAD4AC4-0C3D-469F-817E-C0E330AC11C8.html@@@1.3.2.3.63 MAC_WRP_TONE_MAP Struct@@@typedef struct { uint8_t toneMap[(MAC_WRP_MAX_TONE_GROUPS + 7 ) / 8 ]; } MAC_WRP_TONE_MAP; Defines the G3 Tone Map at Mac Wrapper level. Tone Map is a bitmap in which each bit represents one of the...","GUID-1CE6C7B1-8820-499A-A1BB-8C538F7FD589.html@@@1.2.5.74 LBP_ADP_NETWORK_JOIN_CFM_PARAMS Struct@@@typedef struct { /* The 16-bit network address that was allocated to the device */ uint16_t networkAddress; /* The 16-bit address of the PAN of which the device is now a member */ uint16_t panId; /*...","GUID-1D2776A5-47FB-4A32-A56B-DBA872E241FE.html@@@1.3.2.3.26 MAC_WRP_BeaconNotifyIndication Typedef@@@typedef void (*MAC_WRP_BeaconNotifyIndication)(MAC_WRP_BEACON_NOTIFY_INDICATION_PARAMS *bcnParams); Pointer to a Beacon Notify Indication Event handler function. This data type defines the required...","GUID-203D9ED8-9EA1-4F9D-BEC5-82825F6A5B71.html@@@1.3.2.3.39 MAC_WRP_MEDIA_TYPE_REQUEST Enum@@@typedef enum { MAC_WRP_MEDIA_TYPE_REQ_PLC_BACKUP_RF = 0x00 , MAC_WRP_MEDIA_TYPE_REQ_RF_BACKUP_PLC = 0x01 , MAC_WRP_MEDIA_TYPE_REQ_BOTH = 0x02 , MAC_WRP_MEDIA_TYPE_REQ_PLC_NO_BACKUP = 0x03...","GUID-20ACDB22-F859-4EEF-8D72-9DE944662D5B.html@@@1.2.5.59 ADP_BUFFER_IND_PARAMS Union@@@typedef union { struct { /* Large buffers availability */ /* &apos;1&apos; if buffers available, &apos;0&apos; otherwise */ uint8_t largeBuffersAvailable : 1 ; /* Medium buffers availability */ /* &apos;1&apos; if buffers...","GUID-20DA2A3D-E27C-4A17-A9E2-549F4E0A6E97.html@@@1.2.5.85 LBP_AdpNetworkJoinRequest Function@@@void LBP_AdpNetworkJoinRequest ( uint16_t panId, uint16_t lbaAddress, uint8_t mediaType ); This primitive allows the upper layer to join an existing network. The LBP Join Request primitive allows the...","GUID-21750586-F9F2-4E33-87FB-8F2994BF4744.html@@@Trademarks@@@The Microchip name and logo, the Microchip logo, Adaptec, AVR, AVR logo, AVR Freaks, BesTime, BitCloud, CryptoMemory, CryptoRF, dsPIC, flexPWR, HELDO, IGLOO, JukeBlox, KeeLoq, Kleer, LANCheck, LinkMD...","GUID-217E9D78-5F80-4DCA-A838-92B6FFEE9682.html@@@1.5.3.3 PAL_RF_HandleGet Function@@@PAL_RF_HANDLE PAL_RF_HandleGet ( const SYS_MODULE_INDEX index); Returns a handle to the requested RF PAL instance. This function returns a handle to the requested RF PAL instance. The...","GUID-21D728E0-F728-4A2B-85C9-F20B180BCDCF.html@@@1.3.5.1.7 MAC_RF_SetRequestSync Function@@@MAC_STATUS MAC_RF_SetRequestSync ( MAC_RF_PIB_ATTRIBUTE attribute, uint16_t index, const MAC_PIB_VALUE *pibValue ); The MAC_RF_SetRequestSync primitive sets the value of an attribute in the MAC RF...","GUID-21EA8C0D-DE54-4DD5-A42D-6ECD32D0174A.html@@@1.3.2.3.34 MAC_WRP_HANDLE Typedef@@@typedef uintptr_t MAC_WRP_HANDLE; Identifies an instance of MAC Wrapper module. Handle is returned upon MAC Wrapper Open routine and is used for every other API function to identify module instance...","GUID-22F824C4-F61C-46BD-95EF-C8C42F5072A6.html@@@2.2 Software Prerequisites@@@The instructions in this tutorial assume that you have already installed the following software: MPLAB\u00AE X Integrated Development Environment MPLAB\u00AE XC32/32++ C Compiler MPLAB\u00AE Code Configurator MPLAB\u00AE...","GUID-230883BA-FE76-48B1-996C-C0645CA06166.html@@@1.2.5.86 LBP_AdpNetworkLeaveRequest Function@@@void LBP_AdpNetworkLeaveRequest ( void ); This primitive allows to remove itself from the network. The LBP Leave Request primitive allows a non-coordinator device to remove itself from the network...","GUID-2314447C-75A8-4F76-AC6E-00D87D4DCD8E.html@@@1.3.4.1.21 MAC_PLC_BAND Enum@@@typedef enum { MAC_PLC_BAND_CENELEC_A = 0 , MAC_PLC_BAND_CENELEC_B = 1 , MAC_PLC_BAND_FCC = 2 , MAC_PLC_BAND_ARIB = 3 , } MAC_PLC_BAND; Identifies the possible PLC band values. This enumeration...","GUID-241228E5-0AD2-4AEC-A131-5541399E5605.html@@@1.4.3.2 PAL_PLC_Status Function@@@PAL_PLC_STATUS PAL_PLC_Status (SYS_MODULE_OBJ object); Returns status of the specific instance of the PLC PAL module. This function returns the status of the specific PLC PAL module instance. The...","GUID-243E76CB-2AEC-4573-8F41-8FF413608218.html@@@1.3.2.3.70 MAC_WRP_TimeIsPastSeconds Function@@@bool MAC_WRP_TimeIsPastSeconds ( int32_t timeValue ); Indicates whether the given time value is in the past. This primitive indicates whether the given time value is in the past. None. Param...","GUID-25B01C3E-97CA-4B3B-BFE4-A94D22593542.html@@@1.2.5.10 ADP_SetDataNotifications Function@@@void ADP_SetDataNotifications ( ADP_DATA_NOTIFICATIONS* pNotifications ); Sets ADP data notifications. This routine sets the ADP data notifications. Callback handlers for event notification are set in...","GUID-2608CBA5-2DDA-4210-A9E8-B6F0555F80C4.html@@@1.2.5.93 LBP_SetNotificationsCoord Function@@@void LBP_SetNotificationsCoord ( LBP_NOTIFICATIONS_COORD *pNotifications ); Sets Coordinator LBP notifications. This routine sets the Coordinator LBP notifications. Callback handlers for event...","GUID-2717BEC2-5C5D-45B2-8464-ECCF887FB18F.html@@@1.3.2.3.14 MAC_WRP_ResetRequest Function@@@void MAC_WRP_ResetRequest ( MAC_WRP_HANDLE handle, MAC_WRP_RESET_REQUEST_PARAMS *rstParams ); The MAC_WRP_ResetRequest primitive resets the MAC Wrapper module. Reset operation initializes MAC Wrapper...","GUID-2740E41C-7D15-4D08-8E8F-BADAE9302A57.html@@@1.3.4.1.1 MAC_PLC_Init Function@@@void MAC_PLC_Init ( MAC_PLC_INIT *init ); Initializes the MAC PLC module. This routine initializes the MAC PLC. Callback handlers for event notification are set in this function. A Pointer to MAC PLC...","GUID-27A9FFA1-8987-4AC9-AC8E-629CF9F3467D.html@@@1.3.5.1.5 MAC_RF_DataRequest Function@@@void MAC_RF_DataRequest ( MAC_DATA_REQUEST_PARAMS *drParams ); The MAC_RF_DataRequest primitive requests the transfer of a PDU to another device or multiple devices. DataRequest primitive is used to...","GUID-28F650AE-3279-4FB8-AF6E-83B7FC55C9FD.html@@@1.3.3.1.45 MAC_TONE_MAP Struct@@@typedef struct { uint8_t toneMap[(MAX_TONE_GROUPS + 7 ) / 8 ]; } MAC_TONE_MAP; Defines the G3 Tone Map at Mac level. Tone Map is a bitmap in which each bit represents one of the subbands present in...","GUID-292869C5-E721-4315-91E5-16B2B01934FD.html@@@1.4.1 How the G3 PLC PAL module works@@@The G3 PLC Platform Abstraction Layer (PAL) module is the access point to the G3 MAC RT driver. Figure .\u2000 PLC Platform Abstraction Layer The G3 PLC PAL module offers the necessary functions to control...","GUID-2963D8A1-C5CC-4638-8D22-70DA0D0A1F9F.html@@@1.2.5.23 ADP_DISCOVERY_CFM_CALLBACK Typedef@@@typedef void (*ADP_DISCOVERY_CFM_CALLBACK)(uint8_t status); Pointer to a Discovery Confirm Event handler function. This data type defines the required function signature for the ADP Discovery Confirm...","GUID-29AB9B5D-DC8B-4CEC-910B-3D313AFA91F6.html@@@1.6 G3 ADP MAC Driver Module@@@The G3 ADP MAC Driver module acts as an interface between the G3-PLC ADP layer and the TCP-IP Transport layer. Figure .\u2000 MAC Driver - G3 ADP Adapter G3 ADP MAC Driver is intended to be used with...","GUID-29E72640-652F-4BDB-89F8-87FCF285B361.html@@@1.3.2.3.16 MAC_WRP_ResetConfirm Typedef@@@typedef void (*MAC_WRP_ResetConfirm)(MAC_WRP_RESET_CONFIRM_PARAMS *rcParams); Pointer to a Reset Confirm Event handler function. This data type defines the required function signature for the MAC...","GUID-2BDEA87C-F3C2-4349-A718-509D9552758A.html@@@1.3.3.1.37 MAC_SECURITY_LEVEL Enum@@@typedef enum { MAC_SECURITY_LEVEL_NONE = 0x00 , MAC_SECURITY_LEVEL_ENC_MIC_ 32 = 0x05 , } MAC_SECURITY_LEVEL; Identifies the available Security Levels for G3 frames. This enumeration identifies the...","GUID-2CEAA069-03E3-4EBF-99A9-62AFD64703EC.html@@@1.3.3.1.44 MAC_TIMESTAMP Typedef@@@typedef uint32_t MAC_TIMESTAMP; Defines the Timestamp as an unsigned 32-bit integer. Creates an unsigned 32-bit integer specific type for Timestamp definition. None...","GUID-2D5757BB-539E-45C9-90A9-173F0BF12F29.html@@@1.2.5.66 ADP_EXTENDED_ADDRESS Struct@@@typedef struct { uint8_t value[ 8 ]; } ADP_EXTENDED_ADDRESS; Defines the structure of an extended address. This data type defines the structure of an extended address. Extended Address is the term...","GUID-2F668664-D697-4E68-A6C7-2F5D27A4E2F0.html@@@1.4.3.1 PAL_PLC_Initialize Function@@@SYS_MODULE_OBJ PAL_PLC_Initialize ( const SYS_MODULE_INDEX index, const SYS_MODULE_INIT * const init); Initializes the PLC PAL module. This routine initializes the PLC PAL module, making it ready for...","GUID-2F95446D-E66F-4746-9A7A-D33177A5831A.html@@@1.5.3.26 PAL_RF_TxConfirm Typedef@@@typedef void (*PAL_RF_TxConfirm)(PAL_RF_PHY_STATUS status, uint64_t timeIni, uint64_t timeEnd); Pointer to a RF PAL module transmit confirm callback function. This data type defines the required...","GUID-2FD654B1-3F6B-4211-9C1E-8370044BD3D5.html@@@1.3.2.3.24 MAC_WRP_StartConfirm Typedef@@@typedef void (*MAC_WRP_StartConfirm)(MAC_WRP_START_CONFIRM_PARAMS *scParams); Pointer to a Start Confirm Event handler function. This data type defines the required function signature for the MAC...","GUID-2FFFCDF6-A107-4D35-BF6D-C826A3FA191B.html@@@1.3.2.3.46 MAC_WRP_PAN_ID Typedef@@@typedef uint16_t MAC_WRP_PAN_ID; Defines the PAN ID as an unsigned 16-bit integer. Creates an unsigned 16-bit integer specific type for PAN ID definition. None...","GUID-30ED9818-CEC3-4ACB-BC7D-40E6C778C8C9.html@@@1.3.4.1.9 MAC_PLC_PIB_ATTRIBUTE Enum@@@typedef enum { MAC_PIB_MAX_BE = 0x00000047 , MAC_PIB_BSN = 0x00000049 , MAC_PIB_DSN = 0x0000004C , MAC_PIB_MAX_CSMA_BACKOFFS = 0x0000004E , MAC_PIB_MIN_BE = 0x0000004F , MAC_PIB_MAX_FRAME_RETRIES =...","GUID-3271A360-D403-4EB3-B226-5A654BF1650B.html@@@1.3.5.1.21 MAC_RF_RLQ_IE Struct@@@typedef struct { MAC_RF_HEADER_IE headerIE; uint8_t reverseLqi; } MAC_RF_RLQ_IE; Defines the fields of the MAC Reverse Link Quality Information Element. This structure contains the fields of a MAC...","GUID-3577D138-9FD6-4CE9-81FB-EC5073BFFC87.html@@@1.3.2.3.38 MAC_WRP_HANDLERS Struct@@@typedef struct { /* Callbacks */ MAC_WRP_DataConfirm dataConfirmCallback; MAC_WRP_DataIndication dataIndicationCallback; MAC_WRP_ResetConfirm resetConfirmCallback; MAC_WRP_BeaconNotifyIndication...","GUID-369C7AC6-5DC0-4415-AB03-BB915D630898.html@@@1.3.3.1.23 MAC_COMMON_GetMsCounter Function@@@uint32_t MAC_COMMON_GetMsCounter ( void ); The MAC_COMMON_GetMsCounter primitive gets the value of a counter that is incremented every millisecond. This primitive makes use of SYS_TIME service to get...","GUID-3917AFF1-6CA2-4354-8ABA-086BB55EBB38.html@@@1.2.5.24 ADP_DISCOVERY_IND_CALLBACK Typedef@@@typedef void (*ADP_DISCOVERY_IND_CALLBACK)(ADP_PAN_DESCRIPTOR* pPanDescriptor); Pointer to a Discovery Indication Event handler function. This data type defines the required function signature for the...","GUID-39CD2D44-8E3D-447F-BF49-5ECFA4CB2BD4.html@@@1.4.3.21 PAL_PLC_INIT Struct@@@typedef struct { // PLC PAL Handlers PAL_PLC_HANDLERS macRtHandlers; // G3 Phy band MAC_RT_BAND macRtBand; // Flag to indicate if MIB data should be reinitialized with the default values bool initMIB...","GUID-3AF69AF6-3F8A-4F1E-A878-A2E9D2AC1F3B.html@@@1.3.4.1.7 MAC_PLC_SetRequestSync Function@@@MAC_STATUS MAC_PLC_SetRequestSync ( MAC_PLC_PIB_ATTRIBUTE attribute, uint16_t index, const MAC_PIB_VALUE *pibValue ); The MAC_PLC_SetRequestSync primitive sets the value of an attribute in the MAC PLC...","GUID-3B018E34-75A6-4E6D-85D4-DC2065F37293.html@@@1.3.4.1.11 MAC_PLC_ResetRequest Function@@@void MAC_PLC_ResetRequest ( MAC_RESET_REQUEST_PARAMS *rstParams ); The MAC_PLC_ResetRequest primitive resets the MAC PLC module. Reset operation initializes MAC PLC State Machine and PIB to their...","GUID-3B4F3A4D-1703-428B-BEC5-542F0518578A.html@@@1.6.3.18 DRV_G3ADP_MAC_EventAcknowledge Function@@@bool DRV_G3ADP_MAC_EventAcknowledge (DRV_HANDLE hMac, TCPIP_MAC_EVENT tcpAckEv); Acknowledges and re-enables processed events. This function acknowledges and re-enables processed events. Multiple...","GUID-3B9FF102-B7C5-43CE-97A9-D656AE1D1479.html@@@1.2.5.40 ADP_SET_CFM_CALLBACK Typedef@@@typedef void (*ADP_SET_CFM_CALLBACK)(ADP_SET_CFM_PARAMS* pSetCfm); Pointer to a Set Confirm Event handler function. This data type defines the required function signature for the ADP Set Confirm event...","GUID-3BDC72C1-0D8F-463B-A1D1-08C91264BB63.html@@@1.3.2.3.6 MAC_WRP_DataRequest Function@@@void MAC_WRP_DataRequest ( MAC_WRP_HANDLE handle, MAC_WRP_DATA_REQUEST_PARAMS *drParams ); The MAC_WRP_DataRequest primitive requests the transfer of a PDU to another device or multiple devices...","GUID-3C40E0FF-9716-4D36-8122-BFF9470A7DCC.html@@@1.4.3.19 PAL_PLC_MacSnifferIndication Typedef@@@typedef void (*PAL_PLC_MacSnifferIndication)(uint8_t *pData, uint16_t length); Pointer to a PLC PAL G3 MAC Sniffer Reception Event handler function. This data type defines the required function...","GUID-3C65EE6A-3132-46B5-AA8D-FA1C119AFFDA.html@@@1.3.2.3.1 MAC_WRP_Initialize Function@@@SYS_MODULE_OBJ MAC_WRP_Initialize ( const SYS_MODULE_INDEX index ); Initializes the MAC Wrapper module for the specified Index. This routine initializes the MAC Wrapper module making it ready for...","GUID-3CA6C934-5D44-4FC8-B309-F20F3DF2D841.html@@@1.5.3.9 PAL_RF_GetRfPhyPib Function@@@PAL_RF_PIB_RESULT PAL_RF_GetRfPhyPib (PAL_RF_HANDLE handle, PAL_RF_PIB_OBJ *pibObj); Gets value of RF PHY PIB attribute. This routine allows a client to get the value of a RF PHY Information Base...","GUID-3CBD96A3-FC51-4025-96EA-EEC9F8D3273A.html@@@1.2.5.12 ADP_SetManagementNotifications Function@@@void ADP_SetManagementNotifications ( ADP_MANAGEMENT_NOTIFICATIONS* pNotifications ); Sets ADP management notifications. This routine sets the ADP management notifications. Callback handlers for event...","GUID-3CCA662D-807A-48EC-A077-B0BA61A90040.html@@@1.4.3.10 PAL_PLC_SetCoordinator Function@@@void PAL_PLC_SetCoordinator (PAL_PLC_HANDLE handle); Allows a client to configure the G3-PLC MAC-RT driver as coordinator. This routine configures the G3-PLC MAC-RT driver as coordinator...","GUID-3CD2B9A8-5FE2-444E-8C9C-4B44B1793511.html@@@1.3 G3 MAC Layer@@@The following chapters describe the G3 MAC Layer, show how it is configured, and detail the different parts that make it up...","GUID-3D797D34-F344-46AE-BE01-B1A5B71F235E.html@@@1.2.5.95 LBP_Rekey Function@@@void LBP_Rekey ( uint16_t shortAddress, ADP_EXTENDED_ADDRESS* pEUI64Address, bool distribute ); Starts a rekey process for a device in the network. This routine allows the upper layer to start a rekey...","GUID-3E77332C-665E-426E-81E0-3D9A50BF25A4.html@@@1.2.5.21 ADP_DATA_IND_PARAMS Struct@@@typedef struct { /* The received NSDU */ const uint8_t* pNsdu; /* The size of the NSDU, in bytes; Up to 1280 bytes */ uint16_t nsduLength; /* The value of the link quality during reception of the...","GUID-3E782E12-078C-4F39-8239-3318010C58DD.html@@@1.4.3.18 PAL_PLC_CommStatusIndication Typedef@@@typedef void (*PAL_PLC_CommStatusIndication)(uint8_t *pData); Pointer to a PLC PAL Communication Status event handler function. This data type defines the required function signature for the PLC PAL...","GUID-3EB41264-EE02-4589-9F51-9C5B9422B32C.html@@@1.3.3.1.34 MAC_EXTENDED_ADDRESS Struct@@@typedef struct { uint8_t address[ 8 ]; } MAC_EXTENDED_ADDRESS; Defines the Extended Address as an array of 8 unsigned 8-bit integers. Creates an unsigned 8-bit integer array specific type for Extended...","GUID-3EF258B7-7182-4662-B7E2-BFFAF9EE709C.html@@@2.11 MCC Code Generation@@@When all the required Harmony components are added to the project and configured, it is time to generate the source files. Click Generate button in Project Resources window on left pane Figure .\u2000...","GUID-3FBD1A24-E05D-4AF0-B56E-D6238993B379.html@@@1.5.3.18 PAL_RF_STATUS Enum@@@typedef enum { PAL_RF_STATUS_UNINITIALIZED = SYS_STATUS_UNINITIALIZED, PAL_RF_STATUS_BUSY = SYS_STATUS_BUSY, PAL_RF_STATUS_READY = SYS_STATUS_READY, PAL_RF_STATUS_ERROR = SYS_STATUS_ERROR...","GUID-41A3BC98-8125-4DC8-ADBC-77F6C94648DF.html@@@1.3.3.1.22 MAC_SNIFFER_INDICATION_PARAMS Struct@@@typedef struct { /* Pointer to the set of octets forming the received MSDU */ uint8_t *msdu; /* Reception time, refered to MAC milliseconds counter */ MAC_TIMESTAMP timestamp; /* The PAN identifier of...","GUID-42457FD8-32B2-4202-8005-96B6299B5789.html@@@1.3.4.1.17 MAC_PLC_DATA Struct@@@typedef struct { /* Pointer to MAC Tables */ MAC_PLC_TABLES *macPlcTables; /* Callbacks */ MAC_PLC_HANDLERS macPlcHandlers; /* State of the MAC PLC module */ MAC_PLC_STATE state; /* PLC working band...","GUID-42F6A670-FFE6-4142-8DAD-E903C825162C.html@@@1.3.4.1 G3 MAC PLC Module Interface@@@...","GUID-43F5C595-F344-4F07-BC3C-E3CF2803AB19.html@@@1.2.5.84 LBP_ForceRegister Function@@@void LBP_ForceRegister ( ADP_EXTENDED_ADDRESS *pEUI64Address, uint16_t shortAddress, uint16_t panId, ADP_GROUP_MASTER_KEY *pGMK ); Forces the device register in the network without going through the...","GUID-443274E1-B9BA-43FA-BAE7-3AA034BC2536.html@@@1.3.3.1.18 MAC_BEACON_NOTIFY_INDICATION_PARAMS Struct@@@typedef struct { /* PAN Descriptor. Information of the Beacon frames seen on a G3 network */ MAC_PAN_DESCRIPTOR panDescriptor; } MAC_BEACON_NOTIFY_INDICATION_PARAMS; Defines the Parameters for the MAC...","GUID-4478EA6D-A3D3-46E8-B188-3AD023C101E7.html@@@1.3.3.1.20 MAC_COMM_STATUS_INDICATION_PARAMS Struct@@@typedef struct { /* The PAN identifier from which the frame/event was received */ MAC_PAN_ID panId; /* The address of the device which sent the frame */ MAC_ADDRESS srcAddress; /* The address of the...","GUID-4491B48C-42B5-463D-9893-D8A2C4D4A62C.html@@@1.3.2.3 G3 MAC Wrapper Module Interface@@@...","GUID-44D18D61-0B90-4B73-B98F-733A653CBD28.html@@@1.5.3.25 PAL_RF_DataIndication Typedef@@@typedef void (*PAL_RF_DataIndication)(uint8_t *pData, uint16_t length, PAL_RF_RX_PARAMETERS *pParameters); Pointer to a RF PAL module receive indication callback function. This data type defines the...","GUID-48290B6D-8DC7-4E8C-9BA0-765138AF1FF4.html@@@2.3 Hardware Requirements@@@The hardware development boards supported by Harmony 3 Smart Energy applications are as follows: PIC32CXMTG-EK PIC32CXMTSH-DB PIC32CXMTC-DB ATSAMD20-XPRO Connected to: PL460-EK for PLC communications...","GUID-4A575BD9-B932-4917-A91A-0DBCBC42E733.html@@@1.5.3.27 PAL_RF_HANDLERS Struct@@@typedef struct { PAL_RF_DataIndication palRfDataIndication; PAL_RF_TxConfirm palRfTxConfirm; } PAL_RF_HANDLERS; Defines the handlers required to manage the RF PAL module. This data type defines the...","GUID-4A60631F-7F0C-4C46-91D7-38CF0E5E893C.html@@@1.3.2.3.36 MAC_WRP_STATE Enum@@@typedef enum { MAC_WRP_STATE_NOT_READY, MAC_WRP_STATE_IDLE, MAC_WRP_STATE_ERROR, }MAC_WRP_STATE; Defines the possible states of the MAC Wrapper State Machine. None. None...","GUID-4C00769D-E7D7-4990-A352-CD085EBEF20E.html@@@1.3.2.3.69 MAC_WRP_GetSecondsCounter Function@@@uint32_t MAC_WRP_GetSecondsCounter ( void ); The MAC_WRP_GetSecondsCounter primitive gets the value of a counter that is incremented every second. A seconds counter is provided in order to be able to...","GUID-4C0A36B2-9A04-4107-B2E2-8C5032060BD1.html@@@1.2.5.80 LBP_SetParamDev Function@@@void LBP_SetParamDev ( uint32_t attributeId, uint16_t attributeIndex, uint8_t attributeLen, const uint8_t *pAttributeValue, LBP_SET_PARAM_CONFIRM *pSetConfirm ); Sets the value of a parameter in LBP...","GUID-4C104CED-ED9E-4D35-AB05-01071D1B8BF9.html@@@1.3.4.1.4 MAC_PLC_Status Function@@@SYS_STATUS MAC_PLC_Status ( void ); The MAC_PLC_Status primitive retrieves the Status of PLC MAC. This primitive is intended to be called before using PLC MAC layer to ensure it is ready to be used...","GUID-4C1561DE-D97A-4006-8875-7784B8B61832.html@@@1.6.3.8 DRV_G3ADP_MAC_RxFilterHashTableEntrySet Function@@@TCPIP_MAC_RES DRV_G3ADP_MAC_RxFilterHashTableEntrySet (DRV_HANDLE hMac, const TCPIP_MAC_ADDR* DestMACAddr) Sets the current MAC hash table receive filter. Not implemented. This function has not been...","GUID-4CBC2225-02E9-4BBB-BA10-34C789E2A798.html@@@1.2.5.8 ADP_GetAvailableMacLayers Function@@@ADP_AVAILABLE_MAC_LAYERS ADP_GetAvailableMacLayers ( void ); The ADP_GetAvailableMacLayers primitive gets the available MAC layer(s). G3 projects may include PLC MAC, RF MAC, or both. This funtion...","GUID-4D71C846-289A-4CF9-BE34-8EB8A62598DF.html@@@1.6.3.12 DRV_G3ADP_MAC_Process Function@@@TCPIP_MAC_RES DRV_G3ADP_MAC_Process (DRV_HANDLE hMac); MAC periodic processing function. This is a function that allows for internal processing by the MAC driver. It is meant for processing that...","GUID-4E213740-B099-4CC0-B62A-0A5F872EE491.html@@@1.2.5.70 ADP_PATH_DESCRIPTOR Struct@@@typedef struct { /* Table with the information of each hop in forward direction (according to * forwardHopsCount) */ ADP_HOP_DESCRIPTOR forwardPath[ 16 ]; /* Table with the information of each hop in...","GUID-4E6CFD8F-23CA-423E-9ABA-E8FBC490814B.html@@@1.3.3.1.36 MAC_PAN_ID Typedef@@@typedef uint16_t MAC_PAN_ID; Defines the PAN ID as an unsigned 16-bit integer. Creates an unsigned 16-bit integer specific type for PAN ID definition. None...","GUID-50769E80-5229-4586-A4C1-2A85BECA110B.html@@@1.3.2.3.12 MAC_WRP_GetRequestSync Function@@@MAC_WRP_STATUS MAC_WRP_GetRequestSync ( MAC_WRP_HANDLE handle, MAC_WRP_PIB_ATTRIBUTE attribute, uint16_t index, MAC_WRP_PIB_VALUE *pibValue ); The MAC_WRP_GetRequestSync primitive gets the value of an...","GUID-50F95DF2-5CFC-44D5-95B0-B6C4665FA09C.html@@@1.2.5.6 ADP_STATUS Enum@@@typedef enum { ADP_STATUS_UNINITIALIZED = SYS_STATUS_UNINITIALIZED, ADP_STATUS_BUSY = SYS_STATUS_BUSY, ADP_STATUS_READY = SYS_STATUS_READY, ADP_STATUS_LBP_CONNECTED = SYS_STATUS_READY_EXTENDED + 1...","GUID-518B0758-8978-412B-B689-FFC52C972B8E.html@@@1.3.2.3.44 MAC_WRP_EXTENDED_ADDRESS Struct@@@typedef struct { uint8_t address[ 8 ]; } MAC_WRP_EXTENDED_ADDRESS; Defines the Extended Address as an array of 8 unsigned 8-bit integers. Creates an unsigned 8-bit integer array specific type for...","GUID-52C41DAE-AA7E-4A21-A4F2-44252F7D4708.html@@@1.3.3.1.9 MAC_PIB_VALUE Struct@@@typedef struct { uint8_t length; uint8_t value[MAC_PIB_MAX_VALUE_LENGTH]; } MAC_PIB_VALUE; Defines the MAC PIB Value object. This structure contains the fields which define a PIB Value object, which...","GUID-5342B72E-62A3-44F2-82B0-4241DEBA4FD6.html@@@1.2.4 Using the G3 ADP Module@@@The G3 ADP module is the access point to the G3 Stack for: Initialization Configuration Route Discovery Data Exchange Following examples show how to initialize, configure, and Join/Start a Network...","GUID-53632A84-955D-4C65-A00F-E3752DB629A3.html@@@1.2.5.44 ADP_MAC_SET_CFM_CALLBACK Typedef@@@typedef void (*ADP_MAC_SET_CFM_CALLBACK)(ADP_SET_CFM_PARAMS* pSetCfm); Pointer to an ADP MAC Set Confirm Event handler function. This is the confirmation of a MAC parameter Set through ADP API. This...","GUID-54A447D0-F2ED-427F-8C28-7AF46B80C359.html@@@1.3.3.1.11 MAC_ResetConfirm Typedef@@@typedef void (*MAC_ResetConfirm)(MAC_RESET_CONFIRM_PARAMS *rcParams); Pointer to a Reset Confirm Event handler function. This data type defines the required function signature for the MAC Reset...","GUID-54A49EAD-A7FB-47A4-B1BA-BA7173E389B8.html@@@1.2.5.57 ADP_NETWORK_STATUS_IND_PARAMS Struct@@@typedef struct { /* The 16-bit PAN identifier of the device from which the frame was received */ uint16_t panId; /* The status/event reported by the primitive */ uint8_t status; /* The security level...","GUID-54C52BC2-58EA-41B6-8ED2-14D1E0D35469.html@@@1.3.3.1.40 MAC_COMMON_MIB Struct@@@typedef struct { uint16_t rcCoord; MAC_PAN_ID panId; MAC_SHORT_ADDRESS shortAddress; uint8_t posTableEntryTtl; uint8_t posRecentEntryThreshold; MAC_EXTENDED_ADDRESS extendedAddress; MAC_SECURITY_KEY...","GUID-56785849-5028-41B5-9BB4-BA4937227C0A.html@@@1.3.4.1.15 MAC_PLC_TABLES Struct@@@typedef struct { // Pointers MAC_DEVICE_TABLE_ENTRY *macPlcDeviceTable; // Sizes uint16_t macPlcDeviceTableSize; } MAC_PLC_TABLES; Defines MAC PLC Tables and Sizes. This structure contains pointers to...","GUID-568E9BD0-534A-4605-B661-B95D54AA4F06.html@@@1.2.5.91 LBP_NOTIFICATIONS_COORD Struct@@@typedef struct { LBP_COORD_JOIN_REQUEST_IND_CALLBACK joinRequestIndication; LBP_COORD_JOIN_COMPLETE_IND_CALLBACK joinCompleteIndication; LBP_COORD_LEAVE_IND_CALLBACK leaveIndication; }...","GUID-56E979A6-9549-4F52-9AD7-00F7FF3E230E.html@@@1.2.5.81 LBP_SET_PARAM_CONFIRM Struct@@@typedef struct { /* The identifier of the IB attribute to set */ uint32_t attributeId; /* The index within the table of the specified IB attribute */ uint16_t attributeIndex; /* The result of the set...","GUID-581A73DB-4C0B-439E-A793-D34CE66D794A.html@@@1.3.2.3.62 MAC_WRP_MODULATION_SCHEME Enum@@@typedef enum { MAC_WRP_MODULATION_SCHEME_DIFFERENTIAL = 0x00 , MAC_WRP_MODULATION_SCHEME_COHERENT = 0x01 , } MAC_WRP_MODULATION_SCHEME; Identifies the available Modulation Scheme Values for PLC...","GUID-589B75A2-A362-435B-B80C-B38066E6647E.html@@@1.5.3.17 PAL_RF_TX_HANDLE_INVALID Macro@@@#define PAL_RF_TX_HANDLE_INVALID ((PAL_RF_TX_HANDLE)(- 1 )) Invalid transmission handle. Defines the invalid transmission handle value. Do not rely on the actual value as it may change in different...","GUID-593BB898-E48C-4647-AE4B-0DD043FEB36A.html@@@1.5.3.15 PAL_RF_HANDLE_INVALID Macro@@@#define PAL_RF_HANDLE_INVALID ((PAL_RF_HANDLE) (- 1 )) Invalid handle value to a RF PAL instance. Defines the invalid handle value to a RF PAL instance. Do not rely on the actual value as it may...","GUID-599901A0-8690-4251-9F42-5B86FBB7FB32.html@@@2.12 Application Coding@@@Now, you have the MPLAB\u00AE Harmony components configured for a G3 application. The Getting-Started demo implements a typical G3 Device application. This application is written using the API&apos;s provided...","GUID-59C1F38F-9A54-42FA-8FAE-5CB0809BA380.html@@@1.3.2.3.51 MAC_WRP_PHY_PARAM Enum@@@typedef enum { /* Phy layer version number. 32 bits. */ MAC_WRP_PHY_PARAM_VERSION = 0x010c , /* Correctly transmitted frame count. 32 bits. */ MAC_WRP_PHY_PARAM_TX_TOTAL = 0x0110 , /* Transmitted...","GUID-5BDD2930-D1F3-4432-BF10-884AFDD4F607.html@@@1.3.5.1.1 MAC_RF_Init Function@@@void MAC_RF_Init ( MAC_RF_INIT *init ); Initializes the MAC RF module. This routine initializes the MAC RF. Callback handlers for event notification are set in this function. A Pointer to MAC RF...","GUID-5C1A1473-D1D9-4509-B836-A175E10EB87F.html@@@1.3.2.3.42 MAC_WRP_ADDRESS_MODE Enum@@@typedef enum { MAC_WRP_ADDRESS_MODE_NO_ADDRESS = 0x00 , MAC_WRP_ADDRESS_MODE_SHORT = 0x02 , MAC_WRP_ADDRESS_MODE_EXTENDED = 0x03 , } MAC_WRP_ADDRESS_MODE; Identifies the available Addressing Modes for...","GUID-5C3071F9-23FD-4D2D-863B-16BB5A09F4AB.html@@@1.2.5.90 LBP_COORD_LEAVE_IND_CALLBACK Typedef@@@typedef void (*LBP_COORD_LEAVE_IND_CALLBACK)(uint16_t networkAddress); Pointer to a Leave Indication Event handler function. This data type defines the required function signature for the LBP Leave...","GUID-5C9691CF-6D74-4EBA-BF0A-603CF9162EBF.html@@@1.4.3.9 PAL_PLC_SetMacRtPib Function@@@PAL_PLC_PIB_RESULT PAL_PLC_SetMacRtPib (PAL_PLC_HANDLE handle, MAC_RT_PIB_OBJ *pibObj); Sets value of G3 MAC-RT or G3 PHY PIB attribute. This routine allows a client to set information to PLC...","GUID-5D83382B-671B-4208-8189-0EBCDA47B7FE.html@@@1.3.3.1.30 MAC_SCAN_REQUEST_PARAMS Struct@@@typedef struct { /* Duration of the scan in seconds */ uint16_t scanDuration; } MAC_SCAN_REQUEST_PARAMS; Defines the Parameters for the MAC Scan Request primitive. The structure contains the fields...","GUID-5DD45EFD-BA1D-48A9-BD66-612C31D8F70B.html@@@1.3.2.3.56 MAC_WRP_SECURITY_KEY Struct@@@typedef struct { uint8_t key[MAC_WRP_SECURITY_KEY_LENGTH]; bool valid; } MAC_WRP_SECURITY_KEY; Defines the fields of a Security Key object. This structure contains the fields which define a Security...","GUID-5DE064FA-E67E-4013-82BA-D7E8650EA5B9.html@@@1.3.5.1 G3 MAC RF Module Interface@@@...","GUID-5EE4B61A-34BD-4FDE-B32C-78EA4AAD3A5E.html@@@1.3.4.1.14 MAC_PLC_HANDLERS Struct@@@typedef struct { /* Callbacks */ MAC_DataConfirm macPlcDataConfirm; MAC_DataIndication macPlcDataIndication; MAC_ResetConfirm macPlcResetConfirm; MAC_BeaconNotifyIndication...","GUID-60E553F8-5937-46E8-A754-C68FCFE0F422.html@@@1.3.3.1.17 MAC_BeaconNotifyIndication Typedef@@@typedef void (*MAC_BeaconNotifyIndication)(MAC_BEACON_NOTIFY_INDICATION_PARAMS *bcnParams); Pointer to a Beacon Notify Indication Event handler function. This data type defines the required function...","GUID-622A6F3A-2C5A-4F13-82F1-A460DDB68067.html@@@1.2.5.79 LBP_TasksDev Function@@@void LBP_TasksDev ( void ); Maintains LBP Device state sachine. This function maintains the LoWPAN Bootstrapping Protocol state machine in Device mode. None. None. void APP_Tasks ( void ) {...","GUID-62A36087-7F42-4646-A95B-3B78D9658C43.html@@@1.3.2.3.15 MAC_WRP_RESET_REQUEST_PARAMS Struct@@@typedef struct { /* True to reset the PIB to the default values, false otherwise */ bool setDefaultPib; } MAC_WRP_RESET_REQUEST_PARAMS; Defines the Parameters for the MAC Reset Request primitive. The...","GUID-632F6C49-5835-4A8F-B429-70CB7D4C6515.html@@@1.2.5.4 ADP_Open Function@@@void ADP_Open ( ADP_BAND band ); Opens the ADP module and starts the process that makes it ready for clients to use. This routine opens the ADP module, initializes the ADP data structures and starts...","GUID-633B8458-0502-44D4-A9D3-F51F6A4DEFE7.html@@@1.2.5.55 ADP_PATH_DISCOVERY_CFM_PARAMS Struct@@@typedef struct { /* The short unicast destination address of the path discovery */ uint16_t dstAddr; /* The originator of the path reply */ uint16_t origAddr; /* The status of the path discovery...","GUID-634EB543-3294-42D6-8E46-E691DBD67276.html@@@1.2.5.45 ADP_PIB_ATTRIBUTE Enum@@@typedef enum { ADP_IB_SECURITY_LEVEL = 0x00000000 , /* 8 bits */ ADP_IB_PREFIX_TABLE = 0x00000001 , /* [11 to 27] Byte entries */ ADP_IB_BROADCAST_LOG_TABLE_ENTRY_TTL = 0x00000002 , /* 16 bits */...","GUID-63A2F427-A980-4228-ABBD-2BEB87C699BB.html@@@1.2.5.5 ADP_Status Function@@@ADP_STATUS ADP_Status ( void ); The ADP_Status primitive retrieves the Status of G3 ADP layer. This primitive is intended to be called before using G3 ADP layer to ensure it is ready to be used. None...","GUID-66099712-6066-48A2-A90C-005E9B709533.html@@@1.3.3.1.42 MAC_PAN_DESCRIPTOR Struct@@@typedef struct { uint16_t rcCoord; MAC_PAN_ID panId; MAC_SHORT_ADDRESS lbaAddress; uint8_t linkQuality; } MAC_PAN_DESCRIPTOR; Defines the fields of a PAN Descriptor object. This structure contains the...","GUID-67ACCFEF-5A07-4A75-8296-23F5D9CA7C6E.html@@@1.3.3.1.21 MAC_SnifferIndication Typedef@@@typedef void (*MAC_SnifferIndication)(MAC_SNIFFER_INDICATION_PARAMS *siParams); Pointer to a Sniffer Indication Event handler function. This data type defines the required function signature for the...","GUID-6968B422-1EE3-45D3-88EF-AACC71340A7C.html@@@1.2.5.17 ADP_NoIPDataRequest Function@@@void ADP_NoIPDataRequest ( uint16_t apduLength, const uint8_t *pApdu, uint16_t dstAddr, uintptr_t apduHandle, bool discoverRoute, uint8_t qualityOfService ); This primitive requests the transfer of a...","GUID-6BBD5200-7482-416B-89FB-15EC56A5C997.html@@@1.3.3.1.19 MAC_CommStatusIndication Typedef@@@typedef void (*MAC_CommStatusIndication)(MAC_COMM_STATUS_INDICATION_PARAMS *csParams); Pointer to a Comm Status Indication Event handler function. This data type defines the required function...","GUID-6DABC23B-72E6-457B-B013-1A13173429C4.html@@@1.3.3.1.6 MAC_COMMON_GetRequestSync Function@@@MAC_STATUS MAC_COMMON_GetRequestSync ( MAC_COMMON_PIB_ATTRIBUTE attribute, uint16_t index, MAC_PIB_VALUE *pibValue ); The MAC_COMMON_GetRequestSync primitive gets the value of an attribute in the MAC...","GUID-6F2F6C75-0489-420A-A143-A997D29E00DD.html@@@1.6.3.11 DRV_G3ADP_MAC_PacketRx Function@@@TCPIP_MAC_PACKET* DRV_G3ADP_MAC_PacketRx (DRV_HANDLE hMac, TCPIP_MAC_RES* pRes, TCPIP_MAC_PACKET_RX_STAT* pPktStat); This is the G3 ADP MAC receive function. This function will return a packet if such...","GUID-6F454270-77FA-41B1-9706-6FBE8ACC85B0.html@@@1.5.3.13 PAL_RF_PIB_RESULT Enum@@@typedef enum { PAL_RF_PIB_SUCCESS, PAL_RF_PIB_INVALID_PARAM, PAL_RF_PIB_INVALID_ATTR, PAL_RF_PIB_INVALID_HANDLE, PAL_RF_PIB_READ_ONLY, PAL_RF_PIB_WRITE_ONLY, PAL_RF_PIB_ERROR } PAL_RF_PIB_RESULT...","GUID-6F72FBBA-D42F-49CB-A876-80834D69B85B.html@@@1.3.2.3.43 MAC_WRP_SHORT_ADDRESS Typedef@@@typedef uint16_t MAC_WRP_SHORT_ADDRESS; Defines the Short Address as an unsigned 16-bit integer. Creates an unsigned 16-bit integer specific type for Short Address definition. None...","GUID-6FF0314A-2ABB-49F5-B80D-9FCE8B5A4CB8.html@@@1.3.2.3.68 MAC_WRP_TimeIsPast Function@@@bool MAC_WRP_TimeIsPast ( int32_t timeValue ); Indicates whether the given time value is in the past. This primitive indicates whether the given time value is in the past. SYS_TIME_Initialize...","GUID-7014D621-ACA0-4091-8AE7-DFA284A8AAD0.html@@@1.3.2.3.45 MAC_WRP_ADDRESS Struct@@@typedef struct { union { MAC_WRP_SHORT_ADDRESS shortAddress; MAC_WRP_EXTENDED_ADDRESS extendedAddress; }; MAC_WRP_ADDRESS_MODE addressMode; } MAC_WRP_ADDRESS; Identifies a G3 MAC layer Address. This...","GUID-71770666-1687-4902-98A9-BCB6700F4E48.html@@@1.6.3.16 DRV_G3ADP_MAC_ConfigGet Function@@@size_t DRV_G3ADP_MAC_ConfigGet (DRV_HANDLE hMac, void * configBuff, size_t buffSize, size_t* pConfigSize); G3 ADP MAC driver does not required any additional configuration. This function is not...","GUID-719CC1F7-E283-4218-A885-B3E7FB8196A6.html@@@1.3.2.3.11 MAC_WRP_DATA_INDICATION_PARAMS Struct@@@typedef struct { /* Pointer to the set of octets forming the received MSDU */ uint8_t *msdu; /* Reception time, refered to MAC milliseconds counter */ MAC_WRP_TIMESTAMP timestamp; /* The PAN...","GUID-71FA3724-5AC4-4D34-A9F0-ADB817F7FEE6.html@@@1.2.5.20 ADP_DATA_IND_CALLBACK Typedef@@@typedef void (*ADP_DATA_IND_CALLBACK)(ADP_DATA_IND_PARAMS* pDataInd); Pointer to a Data Indication Event handler function. This data type defines the required function signature for the ADP Data...","GUID-727B36C5-458D-4058-8FF7-124B0CC50C1B.html@@@1.3.3.1.3 MAC_DATA_CONFIRM_PARAMS Struct@@@typedef struct { /* Transmission time, refered to MAC milliseconds counter */ MAC_TIMESTAMP timestamp; /* The handle associated with the MSDU being confirmed */ uint8_t msduHandle; /* The result of...","GUID-72CA4420-C4EF-45BF-90B5-D11CDCD632D8.html@@@1.4.3.5 PAL_PLC_TxRequest Function@@@void PAL_PLC_TxRequest (PAL_PLC_HANDLE handle, uint8_t *pData, uint16_t length); Allows a client to transmit data through PLC device. This routine sends a new data message through PLC using the PLC...","GUID-73649970-DA08-4D86-9388-A2AD03D31FAA.html@@@1.3.3.1.15 MAC_StartConfirm Typedef@@@typedef void (*MAC_StartConfirm)(MAC_START_CONFIRM_PARAMS *scParams); Pointer to a Start Confirm Event handler function. This data type defines the required function signature for the MAC Start...","GUID-74038696-6721-4D28-B2D7-7592F307BD66.html@@@1.3.2.3.59 MAC_WRP_QUALITY_OF_SERVICE Enum@@@typedef enum { MAC_WRP_QUALITY_OF_SERVICE_NORMAL_PRIORITY = 0x00 , MAC_WRP_QUALITY_OF_SERVICE_HIGH_PRIORITY = 0x01 , } MAC_WRP_QUALITY_OF_SERVICE; Identifies the available Quality of Service values...","GUID-7422297E-9811-4B67-A620-7FA5656AF7DF.html@@@1.4.3.11 PAL_PLC_PIB_RESULT Enum@@@typedef enum { PAL_PLC_PIB_SUCCESS = MAC_RT_STATUS_SUCCESS, PAL_PLC_PIB_DENIED = MAC_RT_STATUS_DENIED, PAL_PLC_PIB_INVALID_INDEX = MAC_RT_STATUS_INVALID_INDEX, PAL_PLC_PIB_INVALID_PARAMETER =...","GUID-742F1EE1-E0F8-498C-B350-A67636DBF985.html@@@1.2.5.78 LBP_SetNotificationsDev Function@@@void LBP_SetNotificationsDev ( LBP_NOTIFICATIONS_DEV *pNotifications ); Sets Device LBP notifications. This routine sets the Device LBP notifications. Callback handlers for event notification are set...","GUID-7551DC67-D79D-4F0C-B56F-7B17E12400E0.html@@@The Microchip Website@@@Microchip provides online support via our website at www.microchip.com/ . This website is used to make files and information easily available to customers. Some of the content available includes...","GUID-76E22A1D-2C7B-45EF-83D5-7BA96C7384B8.html@@@1.4.3.12 PAL_PLC_HANDLE Typedef@@@typedef uintptr_t PAL_PLC_HANDLE; Handle to a PLC PAL instance. This data type is a handle to a PLC PAL instance. It can be used to access and control the PLC PAL. Do not rely on the underlying type...","GUID-77428132-D641-4D9A-BEE1-D0D518792533.html@@@1.6.3.13 DRV_G3ADP_MAC_StatisticsGet Function@@@TCPIP_MAC_RES DRV_G3ADP_MAC_StatisticsGet (DRV_HANDLE hMac, TCPIP_MAC_RX_STATISTICS* pRxStatistics, TCPIP_MAC_TX_STATISTICS* pTxStatistics); Gets the current G3 ADP MAC statistics. This function will...","GUID-776BB7C3-CFDF-4ECB-88BA-7A9A8F35FFB2.html@@@1.2.5.47 ADP_LBP_CFM_CALLBACK Typedef@@@typedef void (*ADP_LBP_CFM_CALLBACK)(ADP_LBP_CFM_PARAMS* pLbpCfm); Pointer to a LBP Confirm Event handler function. This data type defines the required function signature for the ADP LBP Confirm event...","GUID-78C5364D-848D-4D81-8631-36729E8C4052.html@@@1.4.3.14 PAL_PLC_STATUS Enum@@@typedef enum { PAL_PLC_STATUS_UNINITIALIZED = SYS_STATUS_UNINITIALIZED, PAL_PLC_STATUS_BUSY = SYS_STATUS_BUSY, PAL_PLC_STATUS_READY = SYS_STATUS_READY, PAL_PLC_STATUS_ERROR = SYS_STATUS_ERROR...","GUID-7940246A-FADD-40F8-894F-D337C1D342D4.html@@@1.2.5.73 LBP_ADP_NETWORK_JOIN_CFM_CALLBACK Typedef@@@typedef void (*LBP_ADP_NETWORK_JOIN_CFM_CALLBACK)(LBP_ADP_NETWORK_JOIN_CFM_PARAMS* pNetworkJoinCfm); Pointer to a Network Join Confirm Event handler function. This data type defines the required...","GUID-7A9953C7-812F-4DCD-9BCF-CDF50292A5EC.html@@@1.3.2.3.57 MAC_WRP_SECURITY_LEVEL Enum@@@typedef enum { MAC_WRP_SECURITY_LEVEL_NONE = 0x00 , MAC_WRP_SECURITY_LEVEL_ENC_MIC_ 32 = 0x05 , } MAC_WRP_SECURITY_LEVEL; Identifies the available Security Levels for G3 frames. This enumeration...","GUID-7CD22A9A-3F18-485E-A06F-35027122EC15.html@@@1.2.5.68 ADP_BAND Enum@@@typedef enum { ADP_BAND_CENELEC_A = 0 , ADP_BAND_CENELEC_B = 1 , ADP_BAND_FCC = 2 , ADP_BAND_ARIB = 3 , ADP_BAND_RF_ONLY = 255 } ADP_BAND; Identifies the possible PLC bands, or if No PLC is used. This...","GUID-7CE40091-9D17-42C1-BE69-DE401A72C154.html@@@1.2.5.82 LBP_ATTRIBUTE Enum@@@typedef enum { LBP_IB_IDS = 0x00000000 , LBP_IB_IDP = 0x00000001 , LBP_IB_PSK = 0x00000002 , LBP_IB_GMK = 0x00000003 , LBP_IB_REKEY_GMK = 0x00000004 , LBP_IB_RANDP = 0x00000005 , LBP_IB_MSG_TIMEOUT =...","GUID-7E1312BC-7144-4E46-8F32-F08FD29D2C0E.html@@@1.2.5.42 ADP_MacSetRequest Function@@@void ADP_MacSetRequest ( uint32_t attributeId, uint16_t attributeIndex, uint8_t attributeLength, const uint8_t *pAttributeValue ); This primitive sets the value of an attribute in the MAC information...","GUID-7E52ABD9-9952-4229-A131-607759CB4166.html@@@1.6.3.14 DRV_G3ADP_MAC_ParametersGet Function@@@TCPIP_MAC_RES DRV_G3ADP_MAC_ParametersGet (DRV_HANDLE hMac, TCPIP_MAC_PARAMETERS* pMacParams); G3 ADP MAC parameter get function. This function returns the run time parameters of the G3 ADP MAC...","GUID-7FB15AD1-A98A-4DD7-996C-456A3E9A785E.html@@@1.3.3.1.1 MAC_COMMON_Init Function@@@void MAC_COMMON_Init ( void ); Initializes the MAC Common module. This routine initializes the MAC Common. No data is needed for this module initialization. None. None. None. // The following code...","GUID-7FEAE330-638D-4A1A-865D-7C300485580A.html@@@1.6.3.1 DRV_G3ADP_MAC_Initialize Function@@@SYS_MODULE_OBJ DRV_G3ADP_MAC_Initialize ( const SYS_MODULE_INDEX index, const SYS_MODULE_INIT * const init); Initializes the G3 ADP MAC. This function supports the initialization of the G3 ADP MAC...","GUID-8031F51F-4BAA-451C-99BA-D4A7F7A71DA8.html@@@1.3.2.1 How the G3 MAC Wrapper module works@@@The G3 MAC Wrapper module is the access point to G3 MAC layers: PLC MAC, RF MAC, and the Common MAC module. In case only one of the MAC layers is present (PLC or RF), the Wrapper acts just as an...","GUID-8098FC47-BABE-4B51-A573-608D954FB92E.html@@@1.3.5.1.3 MAC_RF_Tasks Function@@@void MAC_RF_Tasks ( void ); Maintains MAC RF state machine. MAC RF State Machine controls MAC layer duties, such as transmitting and receiving frames, managing RF medium access or ensure link...","GUID-814E5D74-56DA-4771-B8F6-DF9FDA9D1E62.html@@@1.3.2.3.72 MAC_WRP_SerialStringifyGetConfirm Function@@@uint8_t MAC_WRP_SerialStringifyGetConfirm ( uint8_t *serialData, MAC_WRP_STATUS getStatus, MAC_WRP_PIB_ATTRIBUTE attribute, uint16_t index, uint8_t* pibValue, uint8_t pibLength ); Serialize MAC PIB...","GUID-81EF97A9-791A-4EB5-AF9F-6A182BE28981.html@@@1.2.5.28 ADP_ResetRequest Function@@@void ADP_ResetRequest ( void ); This primitive performs a reset of the adaptation sublayer. The ADP Reset Request primitive performs a reset of the adaptation sublayer and allows the resetting of the...","GUID-82BF3ED7-B7BD-4605-88CF-EBD8BF88D979.html@@@1.3.2.3.9 MAC_WRP_DATA_CONFIRM_PARAMS Struct@@@typedef struct { /* Transmission time, refered to MAC milliseconds counter */ MAC_WRP_TIMESTAMP timestamp; /* The handle associated with the MSDU being confirmed */ uint8_t msduHandle; /* The result...","GUID-82D5E924-97C6-429B-B969-449167D5A99B.html@@@1.3.5.1.24 MAC_RF_DSN_TABLE_ENTRY Struct@@@typedef struct __attribute__ ((packed)) { MAC_ADDRESS address; uint8_t dsn; uint8_t dsnValidTime; } MAC_RF_DSN_TABLE_ENTRY; The MAC RF Data Sequence Number Table Entry. This structure contains the...","GUID-83FD6613-0CB1-48B4-8852-A3FC1ED9CF83.html@@@1.6.3.17 DRV_G3ADP_MAC_EventMaskSet Function@@@bool DRV_G3ADP_MAC_EventMaskSet (DRV_HANDLE hMac, TCPIP_MAC_EVENT macEvMask, bool enable); Enables/disables the G3 ADP MAC events. This is a function that enables or disables the events to be reported...","GUID-846E96AC-A34A-4507-853D-8E73D51C6E2E.html@@@1.4.3.17 PAL_PLC_RxParamsIndication Typedef@@@typedef void (*PAL_PLC_RxParamsIndication)(MAC_RT_RX_PARAMETERS_OBJ *pParameters); Pointer to a PLC PAL event handler function to get parameters from the last received message. This data type defines...","GUID-847B96B1-940C-4A7F-952E-03901A702153.html@@@1.3.2.2 Using the G3 MAC Wrapper Module@@@The G3 MAC Wrapper module is located below the G3 Adaptation layer and on top of both PLC and RF MAC layers. Its mission is to provide abstraction to upper layer (being G3 Adaptation layer or an...","GUID-86CF7814-678D-4879-96A5-2D936FB322E8.html@@@1.3.2.3.40 MAC_WRP_MEDIA_TYPE_CONFIRM Enum@@@typedef enum { MAC_WRP_MEDIA_TYPE_CONF_PLC = 0x00 , MAC_WRP_MEDIA_TYPE_CONF_RF = 0x01 , MAC_WRP_MEDIA_TYPE_CONF_BOTH = 0x02 , MAC_WRP_MEDIA_TYPE_CONF_PLC_AS_BACKUP = 0x03...","GUID-8812567D-6AEF-43C0-AA06-0CD14B15A834.html@@@1.3.2.3.47 MAC_WRP_PAN_DESCRIPTOR Struct@@@typedef struct { uint16_t rcCoord; MAC_WRP_PAN_ID panId; MAC_WRP_SHORT_ADDRESS lbaAddress; uint8_t linkQuality; MAC_WRP_MEDIA_TYPE_INDICATION mediaType; } MAC_WRP_PAN_DESCRIPTOR; Defines the fields of...","GUID-88334860-0D81-4C50-9ABB-DBEFF9E1D72F.html@@@1.3.5.1.9 MAC_RF_MIB Struct@@@typedef struct { uint32_t retryCountRF; uint32_t multipleRetryCountRF; uint32_t txFailCountRF; uint32_t txSuccessCountRF; uint32_t fcsErrorCountRF; uint32_t securityFailureCountRF; uint32_t...","GUID-88BF6153-9EA6-4FCA-9440-7383FB31A19E.html@@@1.4.3.3 PAL_PLC_HandleGet Function@@@PAL_PLC_HANDLE PAL_PLC_HandleGet ( const SYS_MODULE_INDEX index); Returns a handle to the requested PLC PAL instance. This function returns a handle to the requested PLC PAL instance. The...","GUID-8924A301-A932-4961-9663-01A2B16EFC54.html@@@1.2.1 G3 Adaptation Layer Description@@@G3 Adaptation Layer comprises everything above the MAC Layer(s) and below the IPv6 Layer, as seen on the figure. Figure .\u2000 Adaptation Layer Inside the G3 Layers model It contains 3 different blocks...","GUID-89D639B7-04E4-45C9-BB68-1504AF4337FA.html@@@1.5.3.19 PAL_RF_PHY_STATUS Enum@@@typedef enum { PAL_RF_PHY_SUCCESS, PAL_RF_PHY_CHANNEL_ACCESS_FAILURE, PAL_RF_PHY_BUSY_TX, PAL_RF_PHY_TIMEOUT, PAL_RF_PHY_INVALID_PARAM, PAL_RF_PHY_TX_CANCELLED, PAL_RF_PHY_TX_ERROR...","GUID-8B217C1E-8676-4A85-BFC6-380520CCEABC.html@@@1.3.5.1.19 MAC_RF_HEADER_IE Struct@@@typedef struct { uint16_t length : 7 ; uint16_t elementID : 8 ; uint16_t type : 1 ; uint8_t cid[HIE_CID_LEN]; uint8_t subID; } MAC_RF_HEADER_IE; Defines the fields of the MAC Header Information...","GUID-8B4E11FD-1CB4-4BFF-B85D-67A8CBC3BB3B.html@@@2.10 Interrupt Configuration@@@Start NVIC Configuration from Plugins drop-down menu Figure .\u2000 Start NVIC Configuration The needed interrupts are already enabled, but some priorities have to be increased, as seen in the following...","GUID-8B977BDC-ED9C-4C59-94E8-7A79CEDA053D.html@@@1.5.3.4 PAL_RF_Deinitialize Function@@@void PAL_RF_Deinitialize (SYS_MODULE_OBJ object); De-initializes the specified instance of the RF PAL module. This function de-initializes the specified instance of the RF PAL module, disabling its...","GUID-8C886784-B0B6-4F95-BED4-485EF194FF40.html@@@1.6.3.6 DRV_G3ADP_MAC_Close Function@@@void DRV_G3ADP_MAC_Close ( DRV_HANDLE hMac ); Closes a client instance of the G3 ADP MAC Driver. This function closes a client instance of the G3 ADP MAC Driver. Used by tcpip_module_manager...","GUID-8D209244-1AAC-46C8-8990-F78336356F07.html@@@1.5.3.2 PAL_RF_Status Function@@@PAL_RF_STATUS PAL_RF_Status (SYS_MODULE_OBJ object); Returns status of the specific instance of the RF PAL module. This function returns the status of the specific RF PAL module instance. The...","GUID-8D7A37FD-C1A9-4AC2-975A-9C8CF4EF057D.html@@@1.2.5.96 LBP_SetRekeyPhase Function@@@void LBP_SetRekeyPhase ( bool rekeyStart ); Starts or stops a rekey phase in LBP module. This routine allows the upper layer to start or stop a rekey phase in LBP module. Param Description rekeyStart...","GUID-8D7FF9CF-C7F4-4C84-9650-F7C196FA7CCE.html@@@1 MPLAB\u00AE Harmony Smart Energy G3 Stack@@@The Smart Energy G3 Stack is the Microchip implementation of ITU G.9903 ( G3-PLC\u00AE ) standard. It is a Hybrid communication protocol which provides access to both PLC (PowerLine Communication) and RF...","GUID-8D999558-03E4-4744-B0E9-3507829F06FF.html@@@1.2.5.48 ADP_LBP_CFM_PARAMS Struct@@@typedef struct { /* The handle of the NSDU confirmed by this primitive */ uintptr_t nsduHandle; /* The status code of a previous ADP LBP Request */ uint8_t status; } ADP_LBP_CFM_PARAMS; Defines the...","GUID-8E538DB4-AC18-45BC-8284-8A2E0B1C6E4A.html@@@1.3.2 G3 MAC Wrapper Module@@@The G3 MAC Wrapper module acts as an abstraction interface between the PLC and/or RF MAC layers, and the layer above, which may be the G3 Adaptation layer or an application running on top of G3 MAC...","GUID-8F0AD4DE-534A-4060-ADAB-479E418A15E0.html@@@1.2.5.51 ADP_RouteDiscoveryRequest Function@@@void ADP_RouteDiscoveryRequest ( uint16_t dstAddr, uint8_t maxHops ); This primitive allows the upper layer to initiate a route discovery. The ADP Route Discovery Request primitive allows the upper...","GUID-908EFB43-B773-493E-BB61-6906B6EE8BB6.html@@@1.3.2.3.8 MAC_WRP_DataConfirm Typedef@@@typedef void (*MAC_WRP_DataConfirm)(MAC_WRP_DATA_CONFIRM_PARAMS *dcParams); Pointer to a Data Confirm Event handler function. This data type defines the required function signature for the MAC Wrapper...","GUID-93F0FF42-800E-41F5-A64B-402A5FBF0311.html@@@1.3.2.3.48 MAC_WRP_TIMESTAMP Typedef@@@typedef uint32_t MAC_WRP_TIMESTAMP; Defines the Timestamp as an unsigned 32-bit integer. Creates an unsigned 32-bit integer specific type for Timestamp definition. None...","GUID-944A8723-E7E1-4616-B8B5-803E493EC106.html@@@1.3.1 Configuring The G3 MAC Layer@@@G3 MAC Layer configuration is located in the module named G3 Stack , which serves as configurator for every G3 Stack component. Figure .\u2000 G3 MAC Layer Configuration Depending on the available MAC...","GUID-94A3E6F5-033B-42F8-A67E-7CFF400E8D9F.html@@@1.3.3.1.12 MAC_RESET_CONFIRM_PARAMS Struct@@@typedef struct { /* Result of the Reset Request */ MAC_STATUS status; } MAC_RESET_CONFIRM_PARAMS; Defines the Parameters for the MAC Reset Confirm event handler function. The structure contains the...","GUID-9740A2CC-6870-40A5-B7BB-56174C7DF0FC.html@@@1.3.2.3.27 MAC_WRP_BEACON_NOTIFY_INDICATION_PARAMS Struct@@@typedef struct { /* PAN Descriptor. Information of the Beacon frames seen on a G3 network */ MAC_WRP_PAN_DESCRIPTOR panDescriptor; } MAC_WRP_BEACON_NOTIFY_INDICATION_PARAMS; Defines the Parameters for...","GUID-97BA14A3-0910-43D5-B130-BC28366E3DF3.html@@@1.3.2.3.66 MAC_WRP_TX_COEF Struct@@@typedef struct { uint8_t txCoef[ 6 ]; } MAC_WRP_TX_COEF; Defines the attenuation to apply on each of the subbands present in the PLC work band. This structure is part of the Neighbour Table as defined...","GUID-98274FD4-5A25-4F36-BE12-EAAA5A2A2240.html@@@1.5.3.6 PAL_RF_TxRequest Function@@@PAL_RF_TX_HANDLE PAL_RF_TxRequest (PAL_RF_HANDLE handle, uint8_t *pData, uint16_t length, PAL_RF_TX_PARAMETERS *txParameters); Allows a client to transmit data through RF device. This routine sends a...","GUID-98FF15AD-ABDB-4FE1-BF17-E11305B274F6.html@@@1.6.3.15 DRV_G3ADP_MAC_RegisterStatisticsGet Function@@@TCPIP_MAC_RES DRV_G3ADP_MAC_RegisterStatisticsGet (DRV_HANDLE hMac, TCPIP_MAC_STATISTICS_REG_ENTRY* pRegEntries, int nEntries, int * pHwEntries); Gets the current MAC hardware statistics registers...","GUID-9935B748-46DB-4595-B939-3A6E2C49B9B8.html@@@1.2.5.22 ADP_DiscoveryRequest Function@@@void ADP_DiscoveryRequest ( uint8_t duration ); This primitive scans for networks operating in its POS. The ADP Discovery Request primitive allows the upper layer to scan for networks operating in its...","GUID-99ADD020-BCE3-42C3-8D93-E686AE5847D6.html@@@1.2.5.63 ADP_ROUTE_NOT_FOUND_IND_CALLBACK Typedef@@@typedef void (*ADP_ROUTE_NOT_FOUND_IND_CALLBACK)(ADP_ROUTE_NOT_FOUND_IND_PARAMS* pRouteNotFoundInd); Pointer to a Route Not Found Indication Event handler function. This data type defines the required...","GUID-99BD1745-3A51-4F93-8B52-6CF1BDFE6FB0.html@@@1.3.4.1.22 MAC_PLC_MODULATION_SCHEME Enum@@@typedef enum { MODULATION_SCHEME_DIFFERENTIAL = 0x00 , MODULATION_SCHEME_COHERENT = 0x01 , } MAC_PLC_MODULATION_SCHEME; Identifies the available Modulation Scheme Values for PLC communication. This...","GUID-9A6028E4-870C-4977-8D93-CB583E777585.html@@@1.3.5.1.15 MAC_RF_STATE Enum@@@typedef enum { MAC_RF_STATE_IDLE, MAC_RF_STATE_TX, MAC_RF_STATE_WAITING_TX_CFM, MAC_RF_STATE_ERROR, }MAC_RF_STATE; Defines the possible states of the MAC RF State Machine. None. None...","GUID-9A88ADD0-D093-41BA-9F8A-1567C0BF6CB0.html@@@1.5.3.10 PAL_RF_SetRfPhyPib Function@@@PAL_RF_PIB_RESULT PAL_RF_SetRfPhyPib (PAL_RF_HANDLE handle, PAL_RF_PIB_OBJ *pibObj); Sets value of RF PHY PIB attribute. This routine allows a client to set the value of a RF PHY Information Base...","GUID-9BF25173-C973-41FE-AB11-A3B9A2B4A5FD.html@@@1.3.2.3.53 MAC_WRP_NEIGHBOUR_ENTRY Struct@@@typedef struct __attribute__ ((packed)) { MAC_WRP_SHORT_ADDRESS shortAddress; MAC_WRP_TONE_MAP toneMap; uint8_t modulationType : 3 ; uint8_t txGain : 4 ; uint8_t txRes : 1 ; MAC_WRP_TX_COEF txCoef...","GUID-9D7D0154-C72D-469F-8EAC-6F2566416005.html@@@2.9 Pin Configuration@@@Start Pin Configuration from Plugins drop-down menu Figure .\u2000 Start Pin Configuration Configure pins highlighted in yellow and underlined in red (the ones underlined in green are auto-configured by...","GUID-9D8531AE-13D3-4EB7-8F46-72C3449AB603.html@@@1.3.5.1.11 MAC_RF_ScanRequest Function@@@void MAC_RF_ScanRequest ( MAC_SCAN_REQUEST_PARAMS *scanParams ); The MAC_RF_ScanRequest primitive sets MAC RF layer in Network Scan mode. Scan operation asks MAC RF layer to send a Beacon Request...","GUID-9DFB90D2-3F73-4031-8166-407F23BFDF79.html@@@1.2.5.58 ADP_BUFFER_IND_CALLBACK Typedef@@@typedef void (*ADP_BUFFER_IND_CALLBACK)(ADP_BUFFER_IND_PARAMS* bufferInd); Pointer to a Buffer Indication Event handler function. This data type defines the required function signature for the ADP...","GUID-9E047EF2-A59E-4C46-82AB-CEC082F272FF.html@@@1.3.2.3.54 MAC_WRP_POS_ENTRY Struct@@@typedef struct __attribute__ ((packed)) { MAC_WRP_SHORT_ADDRESS shortAddress; uint8_t lqi; uint16_t posValidTime; } MAC_WRP_POS_ENTRY; The MAC PLC POS Table Entry as defined in the G3-PLC standard...","GUID-9E78AFFE-4153-4828-80A2-5B4FFA2BFB66.html@@@1.2.5.67 ADP_ADDRESS Struct@@@typedef struct { union { /* Short address */ uint16_t shortAddr; /* Extended address */ ADP_EXTENDED_ADDRESS extendedAddr; }; /* Address size (ADP_ADDRESS_16BITS or ADP_ADDRESS_64BITS) */ uint8_t...","GUID-9ED71526-3E10-4174-9626-B31AE214E660.html@@@1.3.2.3.30 MAC_WRP_SnifferIndication Typedef@@@typedef void (*MAC_WRP_SnifferIndication)(MAC_WRP_SNIFFER_INDICATION_PARAMS *siParams); Pointer to a Sniffer Indication Event handler function. This data type defines the required function signature...","GUID-9F252FF0-1A85-4731-A3CB-F90DB068F6AD.html@@@1.1 Configuring The G3 Stack@@@There are some general G3 Configuration options, which are independent from different layer configurations. They are explained in this general configuration section. Such options are highlighted on...","GUID-9FE98F27-BDDE-447C-8208-5077CE0E3EDF.html@@@1.3.3.1.24 MAC_COMMON_TimeIsPast Function@@@bool MAC_COMMON_TimeIsPast ( int32_t timeValue ); Indicates whether the given time value is in the past. This primitive indicates whether the given time value is in the past. SYS_TIME_Initialize...","GUID-A0175662-F5DD-489F-BA84-41418E98E238.html@@@1.3.2.3.67 MAC_WRP_GetMsCounter Function@@@uint32_t MAC_WRP_GetMsCounter ( void ); The MAC_WRP_GetMsCounter primitive gets the value of a counter that is incremented every millisecond. This primitive makes use of SYS_TIME service to get the...","GUID-A1013C08-6CAE-41F9-BBEB-E34256546B30.html@@@1.3.4.1.8 MAC_PLC_MIB_SetAttributeSync Function@@@MAC_STATUS MAC_PLC_MIB_SetAttributeSync ( MAC_COMMON_PIB_ATTRIBUTE attribute, uint16_t index, const MAC_PIB_VALUE *pibValue ); The MAC_PLC_MIB_SetAttributeSync primitive sets the value of an attribute...","GUID-A204B08E-9675-45CB-ABD2-13685850EF96.html@@@1.3.4.1.3 MAC_PLC_Tasks Function@@@void MAC_PLC_Tasks ( void ); Maintains MAC PLC state machine. MAC PLC State Machine controls MAC layer duties, such as transmitting and receiving frames, managing PLC medium access or ensure link...","GUID-A2C26221-9411-458D-9B5A-AC355DA5578E.html@@@1.3.2.3.64 MAC_WRP_TONE_MAP_RESPONSE_DATA Struct@@@typedef struct { MAC_WRP_MODULATION_TYPE modulationType; MAC_WRP_MODULATION_SCHEME modulationScheme; MAC_WRP_TONE_MAP toneMap; } MAC_WRP_TONE_MAP_RESPONSE_DATA; Identifies the available fields in a...","GUID-A3C53D1E-155E-46DB-88DA-F2EB561E2A4A.html@@@1.2.5.60 ADP_PREQ_IND_CALLBACK Typedef@@@typedef void (*ADP_PREQ_IND_CALLBACK)( void ); Pointer to a Path Request Indication Event handler function. This data type defines the required function signature for the ADP Path Request Indication...","GUID-A4F99B92-8DBC-4C61-B41D-FB5DA8AD9415.html@@@1.3.2.3.23 MAC_WRP_START_REQUEST_PARAMS Struct@@@typedef struct { /* The PAN Identifier for the started Network */ MAC_WRP_PAN_ID panId; } MAC_WRP_START_REQUEST_PARAMS; Defines the Parameters for the MAC Start Request primitive. The structure...","GUID-A5562638-1C37-441F-8698-C9DEC468ECE1.html@@@1.3.3.1.13 MAC_ScanConfirm Typedef@@@typedef void (*MAC_ScanConfirm)(MAC_SCAN_CONFIRM_PARAMS *scParams); Pointer to a Scan Confirm Event handler function. This data type defines the required function signature for the MAC Scan Confirm...","GUID-A55E0EA8-C6B3-434F-A416-BFEBA6240B64.html@@@1.3.2.3.7 MAC_WRP_DATA_REQUEST_PARAMS Struct@@@typedef struct { /* Pointer to the set of octets forming the MSDU to be transmitted */ const uint8_t *msdu; /* The PAN identifier of the entity to which the MSDU is being transferred */ MAC_WRP_PAN_ID...","GUID-A5694005-52AE-4478-80F6-B65682C993AC.html@@@1.3.3.1.43 MAC_QUALITY_OF_SERVICE Enum@@@typedef enum { MAC_QUALITY_OF_SERVICE_NORMAL_PRIORITY = 0x00 , MAC_QUALITY_OF_SERVICE_HIGH_PRIORITY = 0x01 , } MAC_QUALITY_OF_SERVICE; Identifies the available Quality of Service values for G3 frames...","GUID-A5DE798D-B04C-4094-B421-74A3BA34E39C.html@@@1.3.2.3.74 MAC_WRP_SerialStringifySetConfirm Function@@@uint8_t MAC_WRP_SerialStringifySetConfirm ( uint8_t *serialData, MAC_WRP_STATUS setStatus, MAC_WRP_PIB_ATTRIBUTE attribute, uint16_t index ); Serialize MAC PIB set confirm. This routine serializes a...","GUID-A7522105-2B17-4B94-B32C-46BBC056D53C.html@@@1.3.2.3.20 MAC_WRP_ScanConfirm Typedef@@@typedef void (*MAC_WRP_ScanConfirm)(MAC_WRP_SCAN_CONFIRM_PARAMS *scParams); Pointer to a Scan Confirm Event handler function. This data type defines the required function signature for the MAC Wrapper...","GUID-A79A4876-8351-4EB0-B21F-0E1699CA24EC.html@@@1.2.5.33 ADP_GET_CFM_PARAMS Struct@@@typedef struct { /* The identifier of the IB attribute read */ uint32_t attributeId; /* The index within the table of the specified IB attribute read */ uint16_t attributeIndex; /* The status of the...","GUID-A7D71EF2-E6F4-4A4C-9053-9DD2EE0F06C2.html@@@1.2.2 Configuring The G3 ADP Layer@@@G3 ADP (Adaptation) Layer configuration is located in the module named G3 Stack , which serves as configurator for every G3 Stack component. Figure .\u2000 G3 ADP Layer Configuration The figure shows the...","GUID-A7F419CF-6545-49C0-9437-3925119A75A5.html@@@1.5.3.23 PAL_RF_RX_PARAMETERS Struct@@@typedef struct { /* RX time (PPDU start), referred to system 64-bit time counter */ uint64_t timeIniCount; /* RX time (PPDU end), referred to system 64-bit time counter */ uint64_t timeEndCount; /*...","GUID-A830C149-8580-480A-BF21-1A7855F8A631.html@@@1.2.5.53 ADP_PathDiscoveryRequest Function@@@void ADP_PathDiscoveryRequest ( uint16_t dstAddr, uint8_t metricType ); This primitive allows the upper layer to initiate a path discovery. The ADP Path Discovery Request primitive allows the upper...","GUID-A831CEA3-884B-4007-B433-FF9EDFBAAA1C.html@@@1.3.5.1.17 MAC_RF_FRAME_CONTROL Struct@@@typedef struct { uint16_t frameType : 3 ; uint16_t securityEnabled : 1 ; uint16_t framePending : 1 ; uint16_t ackRequest : 1 ; uint16_t panIdCompression : 1 ; uint16_t reserved : 2 ; uint16_t...","GUID-A8B1F14A-FD6D-4D78-89DF-E350024F43FC.html@@@1.6.3.5 DRV_G3ADP_MAC_Open Function@@@DRV_HANDLE DRV_G3ADP_MAC_Open ( const SYS_MODULE_INDEX drvIndex, const DRV_IO_INTENT intent); Opens a client instance of the G3 ADP MAC Driver. This driver is single instance. This function opens a...","GUID-A96AF936-5C08-49A1-8799-916ECB1BDB24.html@@@2.5 Adding Harmony Modules to Project@@@Go to MCC Project Graph window, as opened in previous step Figure .\u2000 MCC Project Graph Add BSP Component. On Device Resources , navigate to Board Support Packages (BSPs) and click on + sign next to...","GUID-A9C903E0-6916-4597-8936-388EBE7B84C6.html@@@1.3.3.1.27 MAC_STATUS Enum@@@typedef enum { MAC_STATUS_SUCCESS = 0x00 , MAC_STATUS_CHANNEL_ACCESS_FAILURE = 0xE1 , MAC_STATUS_COUNTER_ERROR = 0xDB , MAC_STATUS_DENIED = 0xE2 , MAC_STATUS_FRAME_TOO_LONG = 0xE5...","GUID-A9F746A1-4300-4CE5-A0BA-B8BDAD03966F.html@@@1.2.5.39 ADP_SetRequest Function@@@void ADP_SetRequest ( uint32_t attributeId, uint16_t attributeIndex, uint8_t attributeLength, const uint8_t *pAttributeValue, ADP_SET_CFM_PARAMS* pSetConfirm ); This primitive sets the value of an...","GUID-AA62B3BB-FED2-484C-9BDC-091DAC273A92.html@@@1.2.5.19 ADP_DATA_CFM_PARAMS Struct@@@typedef struct { /* The handle of the NSDU confirmed by this primitive */ uintptr_t nsduHandle; /* The status code (result) of a previous ADP Data Request */ uint8_t status; } ADP_DATA_CFM_PARAMS...","GUID-AA7C9A74-4A2A-4331-9210-B4D69E9C9A7F.html@@@1.2.5.54 ADP_PATH_DISCOVERY_CFM_CALLBACK Typedef@@@typedef void (*ADP_PATH_DISCOVERY_CFM_CALLBACK)(ADP_PATH_DISCOVERY_CFM_PARAMS* pPathDiscoveryCfm); Pointer to a Path Discovery Confirm Event handler function. This data type defines the required...","GUID-AB8A832C-64A0-44B7-A0DE-646E4447B2B3.html@@@1.5.3.12 PAL_RF_PIB_ATTRIBUTE Enum@@@typedef enum { /* RF device identifier. 16 bits */ PAL_RF_PIB_DEVICE_ID = 0x0000 , /* RF PHY layer firmware version number. 6 bytes */ PAL_RF_PIB_FW_VERSION = 0x0001 , /* RF device reset (write-only)...","GUID-ABB4F0A6-CE35-40BD-988E-0425DA9EED20.html@@@1.3.4.1.12 MAC_PLC_ScanRequest Function@@@void MAC_PLC_ScanRequest ( MAC_SCAN_REQUEST_PARAMS *scanParams ); The MAC_PLC_ScanRequest primitive sets MAC PLC layer in Network Scan mode. Scan operation asks MAC PLC layer to send a Beacon Request...","GUID-AC2CC030-B619-46FF-906B-AC5578BF26C2.html@@@1.5.3.5 PAL_RF_Tasks Function@@@void PAL_RF_Tasks ( void ); Maintains the RF PAL&apos;s state machine. This function is used to maintain the RF PAL&apos;s internal state machine. None. None. None. while (true) { PAL_RF_Tasks(); // Do other...","GUID-AC2CC45A-6C30-41A0-AA58-F1CF0F50A3E5.html@@@1.3.5.1.4 MAC_RF_Status Function@@@SYS_STATUS MAC_RF_Status ( void ); The MAC_RF_Status primitive retrieves the Status of RF MAC. This primitive is intended to be called before using RF MAC layer to ensure it is ready to be used...","GUID-AC8461C2-52EE-4D00-A295-6479D4B5257D.html@@@1.6.3 G3 ADP MAC Driver Interface@@@...","GUID-ACA96FFD-1DC4-4DC9-9ABC-E7F28CF3FF60.html@@@1.2.5.77 LBP_NOTIFICATIONS_DEV Struct@@@typedef struct { LBP_ADP_NETWORK_JOIN_CFM_CALLBACK adpNetworkJoinConfirm; LBP_ADP_NETWORK_LEAVE_CFM_CALLBACK adpNetworkLeaveConfirm; LBP_ADP_NETWORK_LEAVE_IND_CALLBACK adpNetworkLeaveIndication; }...","GUID-AE8ADEBB-24CD-4E66-BAAA-FD5D597F01D5.html@@@1.5.1 How the G3 RF PAL module works@@@The G3 RF Platform Abstraction Layer (PAL) module is the access point to the IEEE 802.15.4 RF PHY layer. Figure .\u2000 RF Platform Abstraction Layer The G3 RF PAL module offers the necessary functions to...","GUID-AEA3A34E-0C8D-4F16-B5F4-71313BDBE7E4.html@@@1.2.5.98 LBP_SetParamCoord Function@@@void LBP_SetParamCoord ( uint32_t attributeId, uint16_t attributeIndex, uint8_t attributeLen, const uint8_t *pAttributeValue, LBP_SET_PARAM_CONFIRM *pSetConfirm ); Sets the value of a parameter in LBP...","GUID-AF94BC40-070C-4985-8ED8-C76FB3884213.html@@@1.2.3 How the G3 ADP module works@@@The G3 Adaptation Layer (ADP) module is the access point to G3 Stack. It provides the API to an application running on top of the G3 Stack. It is also intended to be the interface to the IPv6 layer...","GUID-AFF632E7-62E4-4402-A660-EE791387C366.html@@@1.3.3.1 G3 MAC Common Module Interface@@@...","GUID-B058F68A-17BC-467B-9E45-08B009D24383.html@@@1.3.3.1.2 MAC_DataConfirm Typedef@@@typedef void (*MAC_DataConfirm)(MAC_DATA_CONFIRM_PARAMS *dcParams); Pointer to a Data Confirm Event handler function. This data type defines the required function signature for the MAC Data Confirm...","GUID-B0C6EC31-3A57-437C-9E5B-1EE3DF27061D.html@@@1.3.5.1.12 MAC_RF_StartRequest Function@@@void MAC_RF_StartRequest ( MAC_START_REQUEST_PARAMS *startParams ); The MAC_RF_StartRequest primitive starts a G3 Network and sets the device as the PAN Coordinator. Start operation asks MAC RF layer...","GUID-B13C1A2B-2B96-4529-915A-EDDBC89799B3.html@@@1.3.3.1.5 MAC_DATA_INDICATION_PARAMS Struct@@@typedef struct { /* Pointer to the set of octets forming the received MSDU */ uint8_t *msdu; /* Reception time, refered to MAC milliseconds counter */ MAC_TIMESTAMP timestamp; /* The PAN identifier of...","GUID-B1782777-5717-46FD-B44B-D267EABBB27E.html@@@1.2.5.34 ADP_MacGetRequest Function@@@void ADP_MacGetRequest ( uint32_t attributeId, uint16_t attributeIndex ); This primitive gets the value of an attribute from the MAC information base. The ADP MAC Get Request primitive allows the...","GUID-B20F9CA7-9FA5-47B3-99AF-1A32636B09D8.html@@@1.3.4.1.16 MAC_PLC_STATE Enum@@@typedef enum { MAC_PLC_STATE_IDLE, MAC_PLC_STATE_TX, MAC_PLC_STATE_WAITING_TX_CFM, MAC_PLC_STATE_ERROR, }MAC_PLC_STATE; Defines the possible states of the MAC PLC State Machine. None. None...","GUID-B2B127A4-AA65-4A0D-8EB9-D00F8BB26D56.html@@@1.2.5.76 LBP_ADP_NETWORK_LEAVE_IND_CALLBACK Typedef@@@typedef void (*LBP_ADP_NETWORK_LEAVE_IND_CALLBACK)( void ); Pointer to a Network Leave Indication Event handler function. This data type defines the required function signature for the ADP Network...","GUID-B37A374E-7452-4A98-ABAC-EBE51DB01E5F.html@@@1.3.2.3.19 MAC_WRP_SCAN_REQUEST_PARAMS Struct@@@typedef struct { /* Duration of the scan in seconds */ uint16_t scanDuration; } MAC_WRP_SCAN_REQUEST_PARAMS; Defines the Parameters for the MAC Scan Request primitive. The structure contains the...","GUID-B4337F6F-B47F-4A7C-A2C3-EA189484FD4B.html@@@1.2.5.43 ADP_SetRequest Function@@@void ADP_SetRequest ( uint32_t attributeId, uint16_t attributeIndex, uint8_t attributeLength, const uint8_t *pAttributeValue, ADP_SET_CFM_PARAMS* pSetConfirm ); This primitive sets the value of an...","GUID-B467EE6B-5B23-4DF1-A8C8-94426AC4E5B0.html@@@1.6.3.4 DRV_G3ADP_MAC_Tasks Function@@@void DRV_G3ADP_MAC_Tasks ( SYS_MODULE_OBJ object ); Maintains the G3 ADP MAC driver&apos;s state machine. This function is used to maintain the driver&apos;s internal state machine The DRV_G3ADP_MAC_Initialize...","GUID-B4D21995-EE4A-4669-83C3-A70B47664676.html@@@1.3.2.3.28 MAC_WRP_CommStatusIndication Typedef@@@typedef void (*MAC_WRP_CommStatusIndication)(MAC_WRP_COMM_STATUS_INDICATION_PARAMS *csParams); Pointer to a Comm Status Indication Event handler function. This data type defines the required function...","GUID-B4E60F2A-9C63-4353-83CE-9F75399C5598.html@@@1.2.5.26 ADP_NetworkStartRequest Function@@@void ADP_NetworkStartRequest ( uint16_t panId ); This primitive requests the starting of a new network. The ADP Network Start Request primitive allows the upper layer to request the starting of a new...","GUID-B54597B2-D377-4216-BDDA-CDB6D3A16A02.html@@@1.3.4.1.5 MAC_PLC_DataRequest Function@@@void MAC_PLC_DataRequest ( MAC_DATA_REQUEST_PARAMS *drParams ); The MAC_PLC_DataRequest primitive requests the transfer of a PDU to another device or multiple devices. DataRequest primitive is used to...","GUID-B7E9FF3B-178A-4EE7-A344-6218F56A8803.html@@@1.3.5.1.16 MAC_RF_DATA Struct@@@typedef struct { /* Flag to indicate this object is in use */ bool inUse; /* State of the MAC RF module */ MAC_RF_STATE state; /* Callbacks */ MAC_RF_HANDLERS macRfHandlers; /* Pointer to MAC Tables...","GUID-B8321F29-4166-48A5-B0D0-EC910744D01C.html@@@1.2.5.30 ADP_GetRequest Function@@@void ADP_GetRequest ( uint32_t attributeId, uint16_t attributeIndex ); This primitive gets the value of an attribute from the ADP information base. The ADP Get Request primitive allows the upper layer...","GUID-B838ABDE-03E1-4D13-9F42-2D117736575A.html@@@1.2.5.83 LBP_STATUS Enum@@@typedef enum { LBP_STATUS_OK = 0 , LBP_STATUS_NOK, LBP_STATUS_UNSUPPORTED_PARAMETER, LBP_STATUS_INVALID_INDEX, LBP_STATUS_INVALID_LENGTH, LBP_STATUS_INVALID_VALUE } LBP_STATUS; Identifies the list of...","GUID-B85EBF15-FBF5-4447-B66D-C962CFEA4C1B.html@@@1.2.5.94 LBP_KickDevice Function@@@bool LBP_KickDevice ( uint16_t shortAddress, ADP_EXTENDED_ADDRESS* pEUI64Address ); Removes a device from the network. This routine allows the upper layer to remove a device from the network. Param...","GUID-B8A2C034-0D11-4DA2-8755-7D668E5A4F2B.html@@@1.3.2.3.58 MAC_WRP_TX_OPTIONS Enum@@@typedef enum { MAC_WRP_TX_OPTION_NO_ACK = 0x00 , MAC_WRP_TX_OPTION_ACK = 0x01 , } MAC_WRP_TX_OPTIONS; Identifies the available TX Option values for G3 frames. This enumeration identifies the possible...","GUID-B982F61F-1E63-423B-89F6-38140AC3E7B8.html@@@1.2.5.50 ADP_LBP_IND_PARAMS Struct@@@typedef struct { /* The received NSDU */ const uint8_t* pNsdu; /* The size of the NSDU, in bytes; Up to ADP_LBP_MAX_NSDU_LENGTH bytes */ uint16_t nsduLength; /* Source Address of the LBP frame. Short...","GUID-B99FF97B-DF7A-48B1-BC43-CD0B87B86E5C.html@@@1.2.5.32 ADP_GET_CFM_CALLBACK Typedef@@@typedef void (*ADP_GET_CFM_CALLBACK)(ADP_GET_CFM_PARAMS* pGetCfm); Pointer to a Get Confirm Event handler function. This data type defines the required function signature for the ADP Get Confirm event...","GUID-BB7703C7-0559-408E-A574-60EB8173EEE0.html@@@1.5.3.14 PAL_RF_HANDLE Typedef@@@typedef uintptr_t PAL_RF_HANDLE; Handle to a RF PAL instance. This data type is a handle to a RF PAL instance. It can be used to access and control the RF PAL. Do not rely on the underlying type as it...","GUID-BBC53611-3461-4F98-BD5E-2CFD1633B06E.html@@@1.2.5.97 LBP_ActivateNewKey Function@@@void LBP_ActivateNewKey ( void ); Activates the new GMK after a rekeying process. This routine allows the upper layer to activate the new GMK after a rekeying process. None. None. // Start the Rekey...","GUID-BBDC2F3C-7337-4025-993F-27B05617BB7A.html@@@1.3.2.3.60 MAC_WRP_BAND Enum@@@typedef enum { MAC_WRP_BAND_CENELEC_A = 0 , MAC_WRP_BAND_CENELEC_B = 1 , MAC_WRP_BAND_FCC = 2 , MAC_WRP_BAND_ARIB = 3 , MAC_WRP_BAND_RF_ONLY = 255 , } MAC_WRP_BAND; Identifies the possible PLC band...","GUID-BD377D67-B7D8-435A-B15A-3D5B3D36C850.html@@@1.6.3.19 DRV_G3ADP_MAC_EventPendingGet Function@@@TCPIP_MAC_EVENT DRV_G3ADP_MAC_EventPendingGet (DRV_HANDLE hMac); Returns the currently pending events. This function returns the currently pending G3 ADP MAC events. Multiple events will be ORed...","GUID-BE0454CF-93F4-4728-94A3-241F2C38E353.html@@@1.5.3.11 PAL_RF_GetRfPhyPibLength Function@@@uint8_t PAL_RF_GetRfPhyPibLength (PAL_RF_HANDLE handle, PAL_RF_PIB_ATTRIBUTE attribute); Gets size of PIB attribute. This routine allows to get the size in bytes of a RF PHY Information Base (PIB)...","GUID-BF4AC473-E777-4736-B5C1-F589ECFBEA74.html@@@1.2.5.89 LBP_COORD_JOIN_COMPLETE_IND_CALLBACK Typedef@@@typedef void (*LBP_COORD_JOIN_REQUEST_IND_CALLBACK)(uint8_t* pLbdAddress, uint16_t assignedAddress); Pointer to a Join Complete Indication Event handler function. This data type defines the required...","GUID-BFF1042D-25D0-4BE5-9473-0E2467A00B56.html@@@1.3.4 G3 MAC PLC Module@@@The G3 MAC PLC module is in charge of managing the PLC interface. It relies on MAC Common to store some of its resources (those shared with MAC RF). It is located under the MAC Wrapper, and as stated...","GUID-C00E71E6-496B-4ACE-98CA-BCD06356C4B5.html@@@1.3.3 G3 MAC Common Module@@@The G3 MAC Common module contains the resources that are shared between the PLC and RF MACs. It stands to avoid duplicates between layers and provide a common space for such resources. It is located...","GUID-C106FA04-D9C6-43AD-B885-391C5EAED17E.html@@@1.2.5.13 ADP_MANAGEMENT_NOTIFICATIONS Struct@@@typedef struct { ADP_DISCOVERY_CFM_CALLBACK discoveryConfirm; ADP_DISCOVERY_IND_CALLBACK discoveryIndication; ADP_NETWORK_START_CFM_CALLBACK networkStartConfirm; ADP_RESET_CFM_CALLBACK resetConfirm...","GUID-C11FE3C1-DE91-4EB0-B099-0A750F9EE35F.html@@@1.3.5.1.23 MAC_RF_POS_TABLE_ENTRY Struct@@@typedef struct __attribute__ ((packed)) { MAC_SHORT_ADDRESS shortAddress; uint8_t forwardLqi; uint8_t reverseLqi; uint8_t dutyCycle; uint8_t forwardTxPowerOffset; uint8_t reverseTxPowerOffset...","GUID-C15ACA85-08E1-4766-8655-AAAA63AFFB9B.html@@@1.3.2.3.25 MAC_WRP_START_CONFIRM_PARAMS Struct@@@typedef struct { /* Result of the Start Request */ MAC_WRP_STATUS status; } MAC_WRP_START_CONFIRM_PARAMS; Defines the Parameters for the MAC Start Confirm event handler function. The structure...","GUID-C27CDF06-707E-4129-8730-DB1AF205465E.html@@@1.3.3.1.38 MAC_SECURITY_KEY Struct@@@typedef struct { uint8_t key[MAC_SECURITY_KEY_LENGTH]; bool valid; } MAC_SECURITY_KEY; Defines the fields of a Security Key object. This structure contains the fields which define a Security Key...","GUID-C2B499FB-F071-4D59-A304-26DC901DB332.html@@@1.3.2.3.32 MAC_WRP_AVAILABLE_MAC_LAYERS Enum@@@typedef enum { MAC_WRP_AVAILABLE_MAC_PLC = 0x00 , MAC_WRP_AVAILABLE_MAC_RF = 0x01 , MAC_WRP_AVAILABLE_MAC_BOTH = 0x02 , } MAC_WRP_AVAILABLE_MAC_LAYERS; Defines the possible values for MAC layers...","GUID-C2E31207-1551-4326-9FCC-31AE6553D165.html@@@1.2.5.31 ADP_GetRequestSync Function@@@void ADP_GetRequestSync ( uint32_t attributeId, uint16_t attributeIndex, ADP_GET_CFM_PARAMS* pGetConfirm ); This primitive gets the value of an attribute from the ADP information base synchronously...","GUID-C3427C01-AA4C-4595-A24B-4EB0E51438B9.html@@@1.3.2.3.52 MAC_WRP_PHY_PARAM_RF Enum@@@typedef enum { /* RF device identifier. 16 bits */ MAC_WRP_RF_PHY_PARAM_DEVICE_ID = 0x0000 , /* RF PHY layer firmware version number. 6 bytes (see &quot;DRV_RF215_FW_VERSION&quot;) */...","GUID-C3969CB1-3668-4CA4-B62F-1A95FAC42585.html@@@1.3.3.1.35 MAC_ADDRESS Struct@@@typedef struct { union { MAC_SHORT_ADDRESS shortAddress; MAC_EXTENDED_ADDRESS extendedAddress; }; MAC_ADDRESS_MODE addressMode; } MAC_ADDRESS; Identifies a G3 MAC layer Address. This structure...","GUID-C466E473-DE52-47C6-8326-265EA4F74E10.html@@@1.3.3.1.29 MAC_RESET_REQUEST_PARAMS Struct@@@typedef struct { /* True to reset the PIB to the default values, false otherwise */ bool setDefaultPib; } MAC_RESET_REQUEST_PARAMS; Defines the Parameters for the MAC Reset Request primitive. The...","GUID-C5E0F7B0-7355-4FB4-9140-A307352FCBE9.html@@@1.2.5.11 ADP_DATA_NOTIFICATIONS Struct@@@typedef struct { ADP_DATA_CFM_CALLBACK dataConfirm; ADP_DATA_IND_CALLBACK dataIndication; } ADP_DATA_NOTIFICATIONS; Set of event handler function pointers to receive data events from ADP. Defines the...","GUID-C7947B31-C6BF-445C-BBA1-85F748E43157.html@@@1.3.2.3.3 MAC_WRP_Tasks Function@@@void MAC_WRP_Tasks ( SYS_MODULE_OBJ object ); Maintains MAC Layers state machines. MAC Wrapper does not have a State Machine to maintain, but is in charge of calling &quot;_Tasks&quot; routines of the MAC...","GUID-C92ADDF1-ED20-4D94-9E3E-1A81C7EBE034.html@@@1.2.5.52 ADP_ROUTE_DISCOVERY_CFM_CALLBACK Typedef@@@typedef void (*ADP_ROUTE_DISCOVERY_CFM_CALLBACK)(uint8_t status); Pointer to a Route Discovery Confirm Event handler function. This data type defines the required function signature for the ADP Route...","GUID-C94BA76A-A113-4FCC-A030-D9E0F60BC4C2.html@@@1.5.2 Configuring the G3 RF PAL@@@G3 RF PAL is configured via MCC. The configuration is different depending on the RF device used. If the MCU device selected in the project configuration is WBZ45 or PIC32CX-BZ2, the RF PAL is...","GUID-C9AA455A-E0EC-49D1-82ED-EF3ACD3DF61B.html@@@1.3.2.3.4 MAC_WRP_SetCallbacks Function@@@void MAC_WRP_SetCallbacks ( MAC_WRP_HANDLE handle, MAC_WRP_HANDLERS* handlers ); Sets the MAC Wrapper module callback handlers for a given instance. This routine sets the MAC Wrapper callback handlers...","GUID-CA6CF7E4-27B1-47CC-9D05-4B7B317D524B.html@@@1.2.5.41 ADP_SET_CFM_PARAMS Struct@@@typedef struct { /* The identifier of the IB attribute to set */ uint32_t attributeId; /* The index within the table of the specified IB attribute */ uint16_t attributeIndex; /* The status of the set...","GUID-CAA034A0-BFA8-40FE-884F-3F674B93E102.html@@@1.6.3.9 DRV_G3ADP_MAC_PowerMode Function@@@bool DRV_G3ADP_MAC_PowerMode ( DRV_HANDLE hMac, TCPIP_MAC_POWER_MODE pwrMode ); Selects the current power mode for the MAC. Not implemented. This function has not been implemented...","GUID-CBF29E04-8D6A-4AAE-8D45-F49E8388AF36.html@@@1.5.3.1 PAL_RF_Initialize Function@@@SYS_MODULE_OBJ PAL_RF_Initialize ( const SYS_MODULE_INDEX index, const SYS_MODULE_INIT * const init); Initializes the RF PAL module. This routine initializes the RF PAL module, making it ready for...","GUID-CC7BE32A-1E1E-4572-83B4-B38B4FB44213.html@@@1.6.3.7 DRV_G3ADP_MAC_LinkCheck Function@@@bool DRV_G3ADP_MAC_LinkCheck ( DRV_HANDLE hMac ); Checks current link status. This function checks the link status of the associated network interface. DRV_G3ADP_MAC_Initialize must have been called...","GUID-CC9B4DBE-6E45-4CFF-8809-A0A51A2422A2.html@@@1.3.4.1.23 MAC_PLC_MODULATION_TYPE Enum@@@typedef enum { MODULATION_ROBUST = 0x00 , MODULATION_DBPSK_BPSK = 0x01 , MODULATION_DQPSK_QPSK = 0x02 , MODULATION_D8PSK_ 8 PSK = 0x03 , MODULATION_ 16 _QAM = 0x04 , } MAC_PLC_MODULATION_TYPE...","GUID-CD4D71D1-0AFF-48EB-A611-CA9F31A8FAAB.html@@@1.3.3.1.39 MAC_AUXILIARY_SECURITY_HEADER Struct@@@typedef struct { uint32_t frameCounter; uint8_t securityLevel : 3 ; uint8_t keyIdentifierMode : 2 ; uint8_t reserved : 3 ; uint8_t keyIdentifier; } MAC_AUXILIARY_SECURITY_HEADER; Defines the Auxiliary...","GUID-CD8EF876-9DCB-45A0-B7DD-C8CCDCB87C2F.html@@@1.4.3.13 PAL_PLC_HANDLE_INVALID Macro@@@#define PAL_PLC_HANDLE_INVALID ((PAL_PLC_HANDLE) (- 1 )) Invalid handle value to a PLC PAL instance. Defines the invalid handle value to a PLC PAL instance. Do not rely on the actual value as it may...","GUID-CDA512D8-0DE4-4672-8716-04CAC681CB38.html@@@Product Change Notification Service@@@Microchip\u2019s product change notification service helps keep customers current on Microchip products. Subscribers will receive email notification whenever there are changes, updates, revisions or errata...","GUID-CDCB92D5-6846-41EB-BB39-40A46235EB7D.html@@@2 Getting Started with MPLAB\u00AE Harmony G3 Stack@@@...","GUID-CFFF07F9-77AB-4B6E-8F80-1D29F69889DB.html@@@1.3.5.1.8 MAC_RF_PIB_ATTRIBUTE Enum@@@typedef enum { MAC_PIB_DSN_RF = 0x00000200 , MAC_PIB_MAX_BE_RF = 0x00000201 , MAC_PIB_MAX_CSMA_BACKOFFS_RF = 0x00000202 , MAC_PIB_MAX_FRAME_RETRIES_RF = 0x00000203 , MAC_PIB_MIN_BE_RF = 0x00000204...","GUID-D045B9D8-2425-4A91-ADE0-B5AC7F7AAB63.html@@@1.2.5.92 LBP_UpdateLbpSlots Function@@@void LBP_UpdateLbpSlots ( void ); Updates the slots that control bootstrap protocol. This routine updates the slots that control bootstrap protocol and maintains LBP State Machine. None. None. void...","GUID-D0D3BFE3-CDCE-4BFA-B4C2-2CA7F9ABD524.html@@@1.3.5.1.2 MAC_RF_INIT Struct@@@typedef struct { /* Callbacks */ MAC_RF_HANDLERS macRfHandlers; /* Pointer to MAC Tables */ MAC_RF_TABLES *macRfTables; /* RF PAL index from configuration */ uint8_t palRfIndex; } MAC_RF_INIT...","GUID-D1A2EE18-9B3B-4873-A9CD-3BA68740E168.html@@@1.6.3.3 DRV_G3ADP_MAC_Status Function@@@SYS_STATUS DRV_G3ADP_MAC_Status ( SYS_MODULE_OBJ object ); Provides the current status of the G3 ADP MAC driver. This function provides the current status of the G3 ADP MAC driver module. The...","GUID-D22486B3-D1CD-4CF6-8A09-618546263354.html@@@2.7 Adding and Configuring TCP/IP Stack to Project@@@Open TCP/IP Configuration from the Plugins drop-down on the Project Graph window. Figure .\u2000 Open TCPIP Configuration This will open an empty TCP/IP Configuration window, as seen on the figure. Figure...","GUID-D299BD4C-BC76-4AF8-A982-D48E76683D76.html@@@1.5.3.28 PAL_RF_INIT Struct@@@typedef struct { PAL_RF_HANDLERS rfPhyHandlers; } PAL_RF_INIT; Defines the data required to initialize the RF PAL module. This data type defines the data required to initialize the RF PAL module...","GUID-D3348C63-3F7A-4271-8B17-BBD65D656B18.html@@@1.2.5 G3 ADP Module Interface@@@...","GUID-D33A4106-A094-4541-8A7E-1A5A711CABC5.html@@@1.2.5.69 ADP_HOP_DESCRIPTOR Struct@@@typedef struct { /* The hop / node address */ uint16_t hopAddress; /* MetricNotSupported: 1 (the metric type is not supported by the hop) or 0 * (if supported) */ uint8_t mns; /* LinkCost of the hop...","GUID-D3991758-FC0E-47EA-AA5E-E7549249D595.html@@@1.3.5.1.22 MAC_RF_FRAME Struct@@@typedef struct { MAC_RF_HEADER header; MAC_RF_LI_IE liIE; MAC_RF_RLQ_IE rlqIE; uint16_t payloadLength; uint8_t *payload; uint32_t fcs; } MAC_RF_FRAME; Defines the fields of a MAC RF Frame. This...","GUID-D5B23FB2-F9F3-47E0-A996-EEE3FE58F784.html@@@1.3.3.1.28 MAC_DATA_REQUEST_PARAMS Struct@@@typedef struct { /* Pointer to the set of octets forming the MSDU to be transmitted */ const uint8_t *msdu; /* The PAN identifier of the entity to which the MSDU is being transferred */ MAC_PAN_ID...","GUID-D603D5A5-6B2B-4D22-B713-6ACC76CED26F.html@@@1.3.4.1.20 MAC_PLC_FRAME Struct@@@typedef struct { uint8_t *payload; uint16_t payloadLength; uint16_t fcs; MAC_PLC_HEADER header; uint8_t padLength; } MAC_PLC_FRAME; Defines the fields of a MAC PLC Frame. This structure contains the...","GUID-D6C760B0-9331-4139-A8D7-063DBCD12468.html@@@1.3.2.3.17 MAC_WRP_RESET_CONFIRM_PARAMS Struct@@@typedef struct { /* Result of the Reset Request */ MAC_WRP_STATUS status; } MAC_WRP_RESET_CONFIRM_PARAMS; Defines the Parameters for the MAC Reset Confirm event handler function. The structure...","GUID-D910ACFC-B229-4651-85E5-555AE51B4D65.html@@@1.3.2.3.31 MAC_WRP_SNIFFER_INDICATION_PARAMS Struct@@@typedef struct { /* Pointer to the set of octets forming the received MSDU */ uint8_t *msdu; /* Reception time, refered to MAC milliseconds counter */ MAC_WRP_TIMESTAMP timestamp; /* The PAN...","GUID-D9449E2C-20B6-4622-8E58-4A9FFCC14CC4.html@@@1.2.5.7 ADP_SetLBPStatusConnection Function@@@void ADP_SetLBPStatusConnection ( bool lbpConnected ); The ADP_SetLBPStatusConnection primitive sets the LBP status connection. This primitive is intended to be called from LBP module to inform ADP of...","GUID-D9629655-A7AA-45C3-84F7-34D08821C406.html@@@1.3.2.3.49 MAC_WRP_PIB_ATTRIBUTE Enum@@@typedef enum { /*************************************************************************/ /* PLC IBs definition */ /*************************************************************************/...","GUID-DADCBAF6-6ED6-4A62-A1F6-A9BD18E36ABA.html@@@1.3.3.1.16 MAC_START_CONFIRM_PARAMS Struct@@@typedef struct { /* Result of the Start Request */ MAC_STATUS status; } MAC_START_CONFIRM_PARAMS; Defines the Parameters for the MAC Start Confirm event handler function. The structure contains the...","GUID-DAEDF7C8-09E0-47BA-8049-ED75673B616E.html@@@1.3.2.3.61 MAC_WRP_MODULATION_TYPE Enum@@@typedef enum { MAC_WRP_MODULATION_ROBUST = 0x00 , MAC_WRP_MODULATION_DBPSK_BPSK = 0x01 , MAC_WRP_MODULATION_DQPSK_QPSK = 0x02 , MAC_WRP_MODULATION_D8PSK_ 8 PSK = 0x03 , MAC_WRP_MODULATION_ 16 _QAM =...","GUID-DB6DEA81-2A3D-4D24-811D-EDE534D11474.html@@@1.5.3.24 PAL_RF_PIB_OBJ Struct@@@#define PAL_RF_MAX_PIB_SIZE ( 32U ) typedef struct { /* Data buffer where data is read/stored */ uint8_t pData[PAL_RF_MAX_PIB_SIZE]; /* RF Driver PIB Attribute to request */ PAL_RF_PIB_ATTRIBUTE pib...","GUID-DC0FF189-0734-4EBB-AF52-C7E07F5226AE.html@@@1.3.2.3.50 MAC_WRP_PIB_VALUE Struct@@@typedef struct { uint8_t length; uint8_t value[MAC_WRP_PIB_MAX_VALUE_LENGTH]; } MAC_WRP_PIB_VALUE; Defines the fields of a PIB Value object. This structure contains the fields which define a PIB Value...","GUID-DD72280A-55FD-455D-A509-04D74BC9A32D.html@@@1.2.5.46 ADP_LbpRequest Function@@@void ADP_LbpRequest ( const ADP_ADDRESS *pDstAddr, uint16_t nsduLength, uint8_t *pNsdu, uintptr_t nsduHandle, uint8_t maxHops, bool discoveryRoute, uint8_t qualityOfService, bool securityEnable )...","GUID-DE7BA702-E7CA-47A8-9046-787C5D8C92CA.html@@@1.3.3.1.8 MAC_COMMON_PIB_ATTRIBUTE Enum@@@typedef enum { MAC_COMMON_PIB_PAN_ID = 0x00000050 , /* 16 bits */ MAC_COMMON_PIB_PROMISCUOUS_MODE = 0x00000051 , /* 8 bits (bool) */ MAC_COMMON_PIB_SHORT_ADDRESS = 0x00000053 , /* 16 bits */...","GUID-DFB02AF7-8140-47A5-B558-47A655221672.html@@@1.6.1 How the G3 ADP MAC driver works@@@The G3 ADP MAC layer acts as just an interface between the TCPIP stack and the G3 Stack via the G3 Adaptation layer, which is documented on g3_adaptation_layer_description . Figure .\u2000 G3 ADP MAC...","GUID-DFB682CB-CA4D-4763-AC8D-A2F7D3A75496.html@@@1.3.4.1.10 MAC_PLC_MIB Struct@@@typedef struct { MAC_DEVICE_TABLE_ENTRY *deviceTable; uint32_t txDataPacketCount; uint32_t rxDataPacketCount; uint32_t txCmdPacketCount; uint32_t rxCmdPacketCount; uint32_t csmaFailCount; uint32_t...","GUID-E08EFEE9-AEB0-4A55-99AA-8BC9AF583A96.html@@@2.6 Adding and Configuring G3 Stack to Project@@@Add G3 Stack Component. On Device Resources , navigate to SmartEnergy \u2192 G3 Stack and click on + sign next to G3 Stack Figure .\u2000 Add G3 Stack Double-Click on G3 Stack folder just added, or select G3...","GUID-E0A80757-FBD9-4D39-8EA7-A5552FE38E9C.html@@@2.4 Creating a New Harmony MCC Project@@@Open the MPLAB\u00AE X IDE Create a New Project by clicking the New Project icon or by selecting File \u2192 New Project In the New Project window select 32-Bit MCC Harmony Project and click Next Figure .\u2000 New...","GUID-E0BDAF66-5D70-481B-912F-CB10A1CEAE94.html@@@1.5.3.8 PAL_RF_Reset Function@@@void PAL_RF_Reset (PAL_RF_HANDLE handle); Allows a client to reset the RF PAL module. This routine performs a reset of the RF device and clears the RF PHY statistics. PAL_RF_HandleGet must have been...","GUID-E0D867BF-6E08-4D83-81F7-D1C93F9382D4.html@@@1.6.2 Configuring the G3 ADP MAC driver@@@The G3 ADP MAC driver is configured via MCC and it provides a MAC capability to connect to NETCONFIG module of the TCPIP stack. Below is the Snapshot of the MCC configuration window and its brief...","GUID-E0E7873F-7BEA-4E27-9BC0-8BD7ADF9EBBF.html@@@1.3.5.1.13 MAC_RF_HANDLERS Struct@@@typedef struct { /* Callbacks */ MAC_DataConfirm macRfDataConfirm; MAC_DataIndication macRfDataIndication; MAC_ResetConfirm macRfResetConfirm; MAC_BeaconNotifyIndication macRfBeaconNotifyIndication...","GUID-E14505CD-417D-4A70-A9F3-139F7A7B3575.html@@@1.2.5.37 ADP_MAC_GET_CFM_PARAMS Struct@@@typedef struct { /* The identifier of the IB attribute read */ uint32_t attributeId; /* The index within the table of the specified IB attribute read */ uint16_t attributeIndex; /* The status of the...","GUID-E1B42DB7-2FFB-4BC7-AD89-DB60B4D5CD76.html@@@2.13 Build and Program@@@The demo project will be compiled and programmed to PIC32CXMTG-EK board. Build the application Open the project Properties by Right Clicking on the project name (MyFirstG3app) Make sure that XC32...","GUID-E4C99163-E0F5-452C-A6F6-9A4C2F85287A.html@@@1.3.2.3.21 MAC_WRP_SCAN_CONFIRM_PARAMS Struct@@@typedef struct { /* Result of the Scan Request */ MAC_WRP_STATUS status; } MAC_WRP_SCAN_CONFIRM_PARAMS; Defines the Parameters for the MAC Scan Confirm event handler function. The structure contains...","GUID-E5934A69-A7DF-44C5-8F08-8C4C7B41F6E2.html@@@1.2.5.35 ADP_MacGetRequestSync Function@@@void ADP_MacGetRequestSync ( uint32_t attributeId, uint16_t attributeIndex, ADP_MAC_GET_CFM_PARAMS* pGetConfirm ); This primitive gets the value of an attribute from the MAC information base...","GUID-E68F5317-498B-4C77-9CDD-02A91A4638E4.html@@@1.3.2.3.65 MAC_WRP_TONE_MASK Struct@@@typedef struct { uint8_t toneMask[(MAC_WRP_MAX_TONES + 7 ) / 8 ]; } MAC_WRP_TONE_MASK; Defines the G3 Tone Mask at Mac Wrapper level. Tone Mask is a bitmap in which each bit represents one of the...","GUID-E6B40CB8-B379-468A-B179-519AB23D4B16.html@@@1.3.3.1.31 MAC_START_REQUEST_PARAMS Struct@@@typedef struct { /* The PAN Identifier for the started Network */ MAC_PAN_ID panId; } MAC_START_REQUEST_PARAMS; Defines the Parameters for the MAC Start Request primitive. The structure contains the...","GUID-E7455A9B-754C-424A-BEB0-37500BAAB27F.html@@@1.2.5.16 ADP_DataRequest Function@@@void ADP_DataRequest ( uint16_t nsduLength, const uint8_t *pNsdu, uintptr_t nsduHandle, bool discoverRoute, uint8_t qualityOfService ); This primitive requests the transfer of a PDU to another device...","GUID-E7F13CDC-92D2-4B5D-B4D3-0C6F7C13D2F7.html@@@1.3.2.3.37 MAC_WRP_STATUS Enum@@@typedef enum { MAC_WRP_STATUS_SUCCESS = 0x00 , MAC_WRP_STATUS_CHANNEL_ACCESS_FAILURE = 0xE1 , MAC_WRP_STATUS_COUNTER_ERROR = 0xDB , MAC_WRP_STATUS_DENIED = 0xE2 , MAC_WRP_STATUS_FRAME_TOO_LONG = 0xE5...","GUID-E80DA351-D400-4603-95AF-CA201F683E3D.html@@@1.3.2.3.13 MAC_WRP_SetRequestSync Function@@@MAC_WRP_STATUS MAC_WRP_SetRequestSync ( MAC_WRP_HANDLE handle, MAC_WRP_PIB_ATTRIBUTE attribute, uint16_t index, const MAC_WRP_PIB_VALUE *pibValue ); The MAC_WRP_SetRequestSync primitive sets the value...","GUID-E8251634-7B15-4073-A103-5A5F128B8699.html@@@Microchip Devices Code Protection Feature@@@Note the following details of the code protection feature on Microchip products: Microchip products meet the specifications contained in their particular Microchip Data Sheet. Microchip believes that...","GUID-E85AFCD9-7233-419C-9EE0-5D134293713A.html@@@1.2.5.3 ADP_Tasks Function@@@void ADP_Tasks ( SYS_MODULE_OBJ object ); Maintains ADP State Machine. This routine maintains the Adaptation Layer State Machine. It is called from System Tasks routine, application does not have to...","GUID-E8D30B53-E421-4CB0-B768-8D481F63F730.html@@@1.4.3.16 PAL_PLC_TxConfirm Typedef@@@typedef void (*PAL_PLC_TxConfirm)(MAC_RT_STATUS status, bool updateTimestamp); Pointer to a PLC PAL Transmission Confirm event handler function. This data type defines the required function signature...","GUID-E9ACB7E5-5632-4FD1-89C5-8D0832C624BC.html@@@1.4 G3 PLC PAL Module@@@The G3 PLC Platform Abstraction Layer (PAL) module acts as an abstraction interface between the G3-PLC MAC-RT layer and the G3-PLC MAC layer. Figure .\u2000 PLC Platform Abstraction Layer PLC PAL is...","GUID-EA3B0790-B51B-47CD-8DA7-9EE06C9B1E79.html@@@1.3.3.1.32 MAC_ADDRESS_MODE Enum@@@typedef enum { MAC_ADDRESS_MODE_NO_ADDRESS = 0x00 , MAC_ADDRESS_MODE_SHORT = 0x02 , MAC_ADDRESS_MODE_EXTENDED = 0x03 , } MAC_ADDRESS_MODE; Identifies the available Addressing Modes for G3 frames. This...","GUID-EAA01401-3049-4DB7-9942-DDFA75D93C19.html@@@1.3.4.1.19 MAC_PLC_HEADER Struct@@@typedef struct { MAC_PAN_ID srcPanId; MAC_PAN_ID destPanId; MAC_PLC_FRAME_CONTROL frameControl; MAC_ADDRESS destAddress; MAC_ADDRESS srcAddress; MAC_AUXILIARY_SECURITY_HEADER securityHeader; uint8_t...","GUID-EB0474FA-9528-43A5-9FE3-4936D7ADFC41.html@@@1.3.3.1.10 MAC_COMMON_Reset Function@@@void MAC_COMMON_Reset ( void ); The MAC_COMMON_Reset primitive resets the MAC Common module. Reset operation initializes MAC Common PIB to their default values. None. None. None. void...","GUID-EBDE19AF-54F3-45E4-B8DE-9148AF0C4972.html@@@1.5.3.22 PAL_RF_TX_PARAMETERS Struct@@@typedef struct { /* TX time (PPDU start), referred to system 64-bit time counter */ uint64_t timeCount; /* Transmitter power attenuation in dB (max 31 dB) */ uint32_t txPowerAttenuation; /* CSMA...","GUID-EC1F6A4C-B78F-4025-969D-6895D45E4669.html@@@1.3.2.3.22 MAC_WRP_StartRequest Function@@@void MAC_WRP_StartRequest ( MAC_WRP_HANDLE handle, MAC_WRP_START_REQUEST_PARAMS *startParams ); The MAC_WRP_StartRequest primitive starts a G3 Network and sets the device as the PAN Coordinator. Start...","GUID-ECB56835-8385-4BF9-B326-86930C8A8DE2.html@@@1.2.5.62 ADP_NON_VOLATILE_DATA_IND_PARAMS Struct@@@typedef struct { /* MAC frame counter for PLC */ uint32_t frameCounter; /* MAC frame counter for RF */ uint32_t frameCounterRF; /* Discover sequence number */ uint16_t discoverSeqNumber; /* Broadcast...","GUID-ECFA7DD7-974D-4A3A-8BD4-7801D3B9A7E2.html@@@1.4.3.20 PAL_PLC_HANDLERS Struct@@@typedef struct { PAL_PLC_DataIndication palPlcDataIndication; PAL_PLC_CommStatusIndication palPlcCommStatusIndication; PAL_PLC_TxConfirm palPlcTxConfirm; PAL_PLC_RxParamsIndication...","GUID-ED2EF99F-F824-47DA-9AD9-87EE3758DD5D.html@@@1.2.5.49 ADP_LBP_IND_CALLBACK Typedef@@@typedef void (*ADP_LBP_IND_CALLBACK)(ADP_LBP_IND_PARAMS* pLbpInd); Pointer to a LBP Indication Event handler function. This data type defines the required function signature for the ADP LBP Indication...","GUID-ED680F48-FB74-4B27-B6E0-BFA184E9BBFD.html@@@1.2.5.72 LBP_InitDev Function@@@void LBP_InitDev ( void ); Restarts the Device LBP module. This routine restarts the Device LBP module. None. None. // G3 Initialization // Open ADP ADP_Open (ADP_BAND_CENELEC_A); // Initialize LBP...","GUID-EDDBB796-E0F9-4F71-85FC-94CC12FDCE4E.html@@@1.5.3.16 PAL_RF_TX_HANDLE Typedef@@@typedef uintptr_t PAL_RF_TX_HANDLE; Handle to a RF PAL transmission. This data type is a handle to a RF PAL transmission. It is returned from PAL_RF_TxRequest and it can be used to cancel a requested...","GUID-F0395DC9-97E6-41F0-A717-4E5B190B0332.html@@@1.3.3.1.33 MAC_SHORT_ADDRESS Typedef@@@typedef uint16_t MAC_SHORT_ADDRESS; Defines the Short Address as an unsigned 16-bit integer. Creates an unsigned 16-bit integer specific type for Short Address definition. None...","GUID-F05182E4-B102-4775-A746-1FF37F465312.html@@@Customer Support@@@Users of Microchip products can receive assistance through several channels: Distributor or Representative Local Sales Office Embedded Solutions Engineer (ESE) Technical Support Customers should...","GUID-F1585FA1-E8A7-4989-8293-2C700E2E1D55.html@@@1.3.4.1.18 MAC_PLC_FRAME_CONTROL Struct@@@typedef struct { uint16_t frameType : 3 ; uint16_t securityEnabled : 1 ; uint16_t framePending : 1 ; uint16_t ackRequest : 1 ; uint16_t panIdCompression : 1 ; uint16_t reserved : 3 ; uint16_t...","GUID-F1DFAAC3-50CC-4E01-870E-FE56EAE85942.html@@@1.2.5.87 LBP_InitCoord Function@@@void LBP_InitCoord ( bool aribBand ); Initializes the Coordinator LBP module. This routine initializes the Coordinator LBP data structures. Param Description aribBand Flag to indicate if ARIB PLC band...","GUID-F25B1639-26E9-408F-8026-38DD49C335B1.html@@@1.4.3 G3 PLC PAL Module Interface@@@...","GUID-F2C0ED5B-1A16-4EDC-97A4-184E4187499D.html@@@1.3.2.3.55 MAC_WRP_POS_ENTRY_RF Struct@@@typedef struct __attribute__ ((packed)) { MAC_WRP_SHORT_ADDRESS shortAddress; uint8_t forwardLqi; uint8_t reverseLqi; uint8_t dutyCycle; uint8_t forwardTxPowerOffset; uint8_t reverseTxPowerOffset...","GUID-F318CF2F-452D-41AD-A5EC-1D671A98B707.html@@@1.5.3 G3 RF PAL Module Interface@@@...","GUID-F3213E92-AACD-4EB1-9136-B00D23CACD05.html@@@1.2.5.27 ADP_NETWORK_START_CFM_CALLBACK Typedef@@@typedef void (*ADP_NETWORK_START_CFM_CALLBACK)(uint8_t status); Pointer to a Network Start Confirm Event handler function. This data type defines the required function signature for the ADP Network...","GUID-F379AC94-3B75-42D3-920B-2161AF8920A1.html@@@1.3.3.1.26 MAC_COMMON_TimeIsPastSeconds Function@@@bool MAC_COMMON_TimeIsPastSeconds ( int32_t timeValue ); Indicates whether the given time value is in the past. This primitive indicates whether the given time value is in the past. None. Param...","GUID-F3DE7A60-B798-44E5-BC92-7232F31D744D.html@@@1.2.5.88 LBP_COORD_JOIN_REQUEST_IND_CALLBACK Typedef@@@typedef void (*LBP_COORD_JOIN_REQUEST_IND_CALLBACK)(uint8_t* pLbdAddress); Pointer to a Join Request Indication Event handler function. This data type defines the required function signature for the...","GUID-F4E35E52-3C26-4199-8204-9D7D430C4487.html@@@1.3.4.1.6 MAC_PLC_GetRequestSync Function@@@MAC_STATUS MAC_PLC_GetRequestSync ( MAC_PLC_PIB_ATTRIBUTE attribute, uint16_t index, MAC_PIB_VALUE *pibValue ); The MAC_PLC_GetRequestSync primitive gets the value of an attribute in the MAC PLC layer...","GUID-F52AB2FC-F4B0-456A-8E64-8A857A716CA2.html@@@1.3.2.3.18 MAC_WRP_ScanRequest Function@@@void MAC_WRP_ScanRequest ( MAC_WRP_HANDLE handle, MAC_WRP_SCAN_REQUEST_PARAMS *scanParams ); The MAC_WRP_ScanRequest primitive sets MAC layer(s) in Network Scan mode. Scan operation asks MAC layer(s)...","GUID-F5490F2C-DE01-4F4A-B96A-AF24FC53912E.html@@@1.5.3.20 PAL_RF_FSK_FEC Enum@@@typedef enum { /* FSK: FEC enabled */ PAL_RF_FSK_FEC_OFF = 0 , /* FSK: FEC disabled */ PAL_RF_FSK_FEC_ON = 1 , } PAL_RF_FSK_FEC; Defines the available FSK FEC modes. This data type defines the list of...","GUID-F60BE533-68E3-4C12-AF3C-78EC4B83BF24.html@@@1.3.2.3.29 MAC_WRP_COMM_STATUS_INDICATION_PARAMS Struct@@@typedef struct { /* The PAN identifier from which the frame/event was received */ MAC_WRP_PAN_ID panId; /* The address of the device which sent the frame */ MAC_WRP_ADDRESS srcAddress; /* The address...","GUID-F660EA3F-38BF-4C41-87E4-75EDE84BD887.html@@@1.2.5.18 ADP_DATA_CFM_CALLBACK Typedef@@@typedef void (*ADP_DATA_CFM_CALLBACK)(ADP_DATA_CFM_PARAMS* pDataCfm); Pointer to a Data Confirm Event handler function. This data type defines the required function signature for the ADP Data Confirm...","GUID-F6F8E1DE-4AD0-4EA1-A6BB-CE1C6A2F9C6B.html@@@1.3.4.1.2 MAC_PLC_INIT Struct@@@typedef struct { /* Pointer to MAC Tables */ MAC_PLC_TABLES *macPlcTables; /* Callbacks */ MAC_PLC_HANDLERS macPlcHandlers; /* PLC working band */ MAC_PLC_BAND plcBand; /* PLC PAL index from...","GUID-F6FCD5F2-5C69-4593-841A-DE9B9573A2DB.html@@@1.2.5.1 ADP_Initialize Function@@@SYS_MODULE_OBJ ADP_Initialize ( const SYS_MODULE_INDEX index, const SYS_MODULE_INIT * const init ); Initializes the ADP module for the specified Index. This routine initializes the ADP module making...","GUID-F78CCA7B-EF42-4139-AE2F-8DCE0D65226A.html@@@1.3.2.3.41 MAC_WRP_MEDIA_TYPE_INDICATION Enum@@@typedef enum { MAC_WRP_MEDIA_TYPE_IND_PLC = 0x00 , MAC_WRP_MEDIA_TYPE_IND_RF = 0x01 , } MAC_WRP_MEDIA_TYPE_INDICATION; Identifies the possible Media Type values on Reception Indication callbacks. This...","GUID-F83AE123-24FD-43B9-A707-81527B707DC3.html@@@1.3.3.1.14 MAC_SCAN_CONFIRM_PARAMS Struct@@@typedef struct { /* Result of the Scan Request */ MAC_STATUS status; } MAC_SCAN_CONFIRM_PARAMS; Defines the Parameters for the MAC Scan Confirm event handler function. The structure contains the...","GUID-F83C8603-D6EF-4BD9-A1DC-BC46E7CF6D44.html@@@1.3.2.3.5 MAC_WRP_Status Function@@@SYS_STATUS MAC_WRP_Status ( void ); The MAC_WRP_Status primitive retrieves the Status of G3 MAC layer(s). This primitive is intended to be called before using G3 MAC layer(s) to ensure they are ready...","GUID-F8EBC831-9D5E-4F72-9241-1AEB718CDB7C.html@@@1.2.5.36 ADP_MAC_GET_CFM_CALLBACK Typedef@@@typedef void (*ADP_MAC_GET_CFM_CALLBACK)(ADP_MAC_GET_CFM_PARAMS* pGetCfm); Pointer to an ADP MAC Get Confirm Event handler function. This is the confirmation of a MAC parameter Get through ADP API...","GUID-FA3597AE-8519-426D-9BF1-9C33D9A3BA5B.html@@@1.3.3.1.7 MAC_COMMON_SetRequestSync Function@@@MAC_STATUS MAC_COMMON_SetRequestSync ( MAC_COMMON_PIB_ATTRIBUTE attribute, uint16_t index, const MAC_PIB_VALUE *pibValue ); The MAC_COMMON_SetRequestSync primitive sets the value of an attribute in...","GUID-FA8AE9BB-E07D-4587-B951-D3AF01D16D6C.html@@@1.3.5 G3 MAC RF Module@@@The G3 MAC RF module is in charge of managing the RF interface. It relies on MAC Common to store some of its resources (those shared with MAC PLC). It is located under the MAC Wrapper, and as stated...","GUID-FB2D99E1-43F0-4AEC-B8CD-6DD634313F44.html@@@1.2.5.29 ADP_RESET_CFM_CALLBACK Typedef@@@typedef void (*ADP_RESET_CFM_CALLBACK)(uint8_t status); Pointer to a Reset Confirm Event handler function. This data type defines the required function signature for the ADP Reset Confirm event...","GUID-FBA55F90-409F-457E-9728-0F48AFD1184F.html@@@1.2.5.14 ADP_SetNotificationsToLbp Function@@@void ADP_SetNotificationsToLbp ( ADP_NOTIFICATIONS_TO_LBP* pNotifications ); Sets ADP notifications to LBP. This routine sets the ADP notifications to LBP. Callback handlers for event notification are...","GUID-FD594728-1C67-444A-AFD5-95ACC81A5CF6.html@@@1.2.5.2 ADP_INIT Struct@@@typedef struct { /* Pointer to start of 1280-byte buffers */ void * pBuffers1280; /* Pointer to start of 400-byte buffers */ void * pBuffers400; /* Pointer to start of 100-byte buffers */ void *...","GUID-FD982FE5-AF83-4E3A-98BB-E8984D3E4B5F.html@@@1.2.5.71 ADP_PLC_BAND Enum@@@typedef enum { /* Success */ G3_SUCCESS = 0x00 , /* Invalid request */ G3_INVALID_REQUEST = 0xA1 , /* Request failed */ G3_FAILED = 0xA2 , /* Invalid IPv6 frame */ G3_INVALID_IPV6_FRAME = 0xA3 , /*...","GUID-FF4E7A76-62D1-479E-B87C-3B164DD3C5ED.html@@@1.3.3.1.41 MAC_DEVICE_TABLE_ENTRY Struct@@@typedef struct { uint32_t frameCounter; MAC_SHORT_ADDRESS shortAddress; } MAC_DEVICE_TABLE_ENTRY; Defines the fields of an entry in the MAC Device Table. This structure contains the fields which...","GUID-FFAA1C41-06E1-42C7-894C-32DCF8CDCC47.html@@@1.3.4.1.13 MAC_PLC_StartRequest Function@@@void MAC_PLC_StartRequest ( MAC_START_REQUEST_PARAMS *startParams ); The MAC_PLC_StartRequest primitive starts a G3 Network and sets the device as the PAN Coordinator. Start operation asks MAC PLC...","cshelp.html@@@Context Sensitive Help@@@..."];
});